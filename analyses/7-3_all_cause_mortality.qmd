---
title: "7-3 All Cause Mortality Day 28 and Day 90"
description: |
  Analyse of the all-cause mortality secondary outcome in ASCOT.
author:
  - name: Rob Mahar
    affiliation: University of Melbourne
  - name: James Totterdell
    affiliation: University of Sydney
date: last-modified
---

# Preamble {#preamble}

```{r}
#| label: pkgs
#| code-summary: Load packages
library(tidyverse)
library(labelled)
library(kableExtra)
library(cmdstanr)
library(posterior)
library(bayestestR)
library(bayesplot)
library(matrixStats)
library(lubridate)
library(patchwork)
library(ggdist)

theme_set(theme_classic(base_size = 10, base_family = "Palatino") +
  theme(panel.grid = element_blank(),
        strip.background = element_blank()))
bayesplot_theme_set(theme_set(theme_classic(base_size = 10, base_family = "Palatino") +
  theme(panel.grid = element_blank(),
        strip.background = element_blank())))
color_scheme_set("red")
options(digits = 4)
```

```{r}
#| label: data
#| code-summary: Prepare dataset
devtools::load_all()
all_dat <- read_all_no_daily()

# Anticoagulation set (intention-to-treat, including missing)
acs_itt_dat <- all_dat %>% 
  filter_acs_itt() %>%
  transmute_model_cols_grp_aus_nz() %>% 
  left_join(all_dat %>% select(StudyPatientID, D28_death), by = "StudyPatientID")

# Anticoagulation set (intention-to-treat, excluding missing)
acs_itt_nona_dat <- acs_itt_dat %>% 
  filter(!is.na(D28_death))  

# Concurrent enrolments for C2
acs_itt_concurc2_dat <- acs_itt_dat %>%
  filter_concurrent_intermediate()
acs_itt_concurc2_nona_dat <- acs_itt_concurc2_dat %>% 
  filter(!is.na(D28_death))

# Concurrent enrolments for C3
acs_itt_concurc3_dat <- acs_itt_dat %>%
  filter_concurrent_std_aspirin()
acs_itt_concurc3_nona_dat <- acs_itt_concurc3_dat %>% 
  filter(!is.na(D28_death))

# Concurrent enrolments for C4
acs_itt_concurc4_dat <- acs_itt_dat %>%
  filter_concurrent_therapeutic()
acs_itt_concurc4_nona_dat <- acs_itt_concurc4_dat %>% 
  filter(!is.na(D28_death))
```

# Descriptive

```{r}
#| code-summary: Summary table
#| label: descriptive-table-mortality-anticoagulation
make_mortality_table <- function(dat, format = "html") {
  tab <- dat %>%
    mutate(CAssignment = factor(CAssignment, labels = intervention_labels()$CAssignment[-1])) %>%
    group_by(CAssignment) %>%
    summarise(
      Randomised = n(),
      `Outcome missing` = sprintf(
        "%i (%.1f)", sum(is.na(D28_death)), 100 * mean(is.na(D28_death))),
      `Outcome observed` = sprintf(
        "%i (%.1f)", sum(!is.na(D28_death)), 100 * mean(!is.na(D28_death))),
      `Died by day 28` = sprintf(
        "%i (%.1f)", sum(D28_death, na.rm = TRUE), 100 * mean(D28_death, na.rm = TRUE)),
    ) %>%
    bind_rows(
      dat  %>%
        group_by(CAssignment = "Overall") %>%
        summarise(
          Randomised = n(),
          `Outcome missing` = sprintf(
            "%i (%.1f)", sum(is.na(D28_death)), 100 * mean(is.na(D28_death))),
          `Outcome observed` = sprintf(
            "%i (%.1f)", sum(!is.na(D28_death)), 100 * mean(!is.na(D28_death))),
          `Died by day 28` = sprintf(
            "%i (%.1f)", sum(D28_death, na.rm = TRUE), 100 * mean(D28_death, na.rm = TRUE)),
      )
    ) %>%
    mutate(CAssignment = fct_inorder(CAssignment)) %>%
    gather(key, value, -CAssignment, factor_key = T) %>%
    spread(CAssignment, value)
  colnames(tab)[1] <- "n (\\%)"
  if(format == "latex") {
    colnames(tab) <- linebreak(colnames(tab), align = "c", linebreaker = "<br>")
  }
    kable(tab,
      format = format,
      align = "lrrrrr",
      escape = FALSE,
      booktabs = TRUE
    ) %>%
    kable_styling(font_size = 10, latex_options = "HOLD_position")  
}
save_tex_table(make_mortality_table(
      all_dat %>%
      filter_acs_itt(),
      "latex"), 
      "outcomes/secondary/anticoagulation-summary-mortality")
make_mortality_table(
    all_dat %>%
      filter_acs_itt()
)
```

## Age

```{r}
#| label: fig-age-po
#| code-summary: Relationship age to outcome
#| fig-cap: |
#|   Relationship (logistic regression linear in age) 
#|   between age at entry and the primary outcome.
agedat <- acs_itt_dat %>%
  dplyr::count(D28_death, AgeAtEntry) %>% 
  spread(D28_death, n, fill = 0) %>% 
  mutate(
    n = `0` + `1` + `<NA>`,
    p = `1` / (`1` + `0`))
agemod <- glm(
  cbind(`1`, `0`) ~ AgeAtEntry, 
  data = agedat, 
  family = binomial())
agedat <- agedat %>%
  mutate(
    ypred = predict(agemod, newdata = agedat, type = "response")
  )
p1 <- ggplot(agedat, aes(AgeAtEntry, n)) +
  geom_col(colour = "grey40", fill = "grey40") +
  geom_vline(xintercept = 60, linetype = 2) +
  labs(y = "Number of\nparticipants",
       x = "Age at entry")
p2 <- ggplot(agedat, aes(AgeAtEntry, p)) +
    geom_point() +
    geom_vline(xintercept = 60, linetype = 2) +
    geom_line(aes(y = ypred)) +
    labs(y = "Proportion\ndied by day 28", x = "Age at entry")
p <- p1 | p2
path <- file.path("outputs", "figures", "outcomes", "secondary")
ggsave(file.path(path, "7-3-age.pdf"), p, height = 2, width = 6)
p
```

## Country

```{r}
#| label: tbl-country-po
#| code-summary: Relationship country to outcome
#| tbl-cap: Primary outcome by country.
tdat <- all_dat %>%
  filter_acs_itt() %>%
  dplyr::count(Country = PT_CountryName, D28_death) %>%
  group_by(Country) %>%
  spread(D28_death, n, fill = 0) %>%
  mutate(
    n = `1` + `0` + `<NA>`,
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  )
p1 <- ggplot(tdat, aes(Country, n)) +
  geom_col() +
    labs(
      y = "Number of\nparticipants", 
      x = "Country of enrolment")
p2 <- ggplot(tdat, aes(Country, p_1)) +
  geom_point() +
    labs(
      y = "Proportion\ndied by day 28", 
      x = "Country of enrolment")  +
  ylim(0, NA)
p <- p1 | p2
path <- file.path("outputs", "figures", "outcomes", "secondary")
ggsave(file.path(path, "7-3-country.pdf"), p, height = 2, width = 6)
p
```

## Site

```{r}
#| label: tbl-site-7-3
#| code-summary: Relationship site to outcome
#| tbl-cap: Day 28 mortality by site within country.
tdat <- all_dat %>%
  filter_acs_itt() %>%
  dplyr::count(
    Country_lab = Country,
    Site_lab = fct_infreq(Location),
    Country = factor(PT_CountryName, levels = c("India", "Australia", "Nepal", "New Zealand")),
    Site = PT_LocationName,
    D28_death) %>%
  group_by(Country, Site) %>%
  spread(D28_death, n, fill = 0) %>%
  mutate(
    n = `1` + `0` + `<NA>`,
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  ungroup()

p1 <- ggplot(tdat, aes(Site_lab, n)) +
  facet_grid( ~ Country, scales = "free_x", space = "free_x") +
  geom_col() +
    labs(
      y = "Number of\nparticipants", 
      x = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.border = element_rect(fill = NA))
p2 <- ggplot(tdat, aes(Site_lab, p_1)) +
  facet_grid( ~ Country, scales = "free_x", space = "free_x") +
  geom_point() +
    labs(
      y = "Proportion\ndied by day 28", 
      x = "Site of enrolment") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.border = element_rect(fill = NA))
p <- p1 / p2
path <- file.path("outputs", "figures", "outcomes", "secondary")
ggsave(file.path(path, "7-3-country-site.pdf"), p, height = 4, width = 6.25)
p
```

## Calendar Time

```{r}
#| label: fig-cal-po
#| code-summary: Relationship calendar date to outcome
#| fig-cap: |
#|   Relationship between calendar date and the primary outcome.
caldat <- all_dat %>% 
  filter_acs_itt() %>%
  dplyr::count(D28_death, yr = year(RandDate), mth = month(RandDate)) %>% 
  spread(D28_death, n, fill = 0) %>% 
  mutate(p = `1` / (`1` + `0`),
         n = `1` + `0` + `<NA>`)
p1 <- ggplot(caldat, aes(mth, p)) +
  facet_grid( ~ yr, drop = T, scales = "free_x", space = "free") +
    geom_point() +
    labs(
      y = "Proportion\ndied by day 28", 
      x = "Calendar date (month of year)") +
  scale_x_continuous(breaks = 1:12) +
  ylim(0, 0.15)
p2 <- ggplot(caldat, aes(mth, n)) +
  facet_grid( ~ yr, drop = T, scales = "free_x", space = "free") +
    geom_col() +
    labs(
      y = "Number of\nparticipants", 
      x = "Calendar date (month of year)") +
  scale_x_continuous(breaks = 1:12)
p <- p2 | p1
path <- file.path("outputs", "figures", "outcomes", "secondary")
ggsave(file.path(path, "7-3-calendar-time.pdf"), p, height = 2, width = 6)
p
```

# Modelling

The analysis for all cause mortality is specified equivalently to that for the primary outcome. It includes intervention as randomised, age category, country, site nested within country, epoch, and intervention eligibility. The main analysis restricts the population to only those participants randomised to the anticoagulation domain.

```{r}
#| label: load-models
#| code-summary: Compiles stan models.
seed <- 59579
model_full <- cmdstan_model(file.path("stan", "primary_logistic_model_site_epoch.stan"))
```

```{r}
#| label: Munge stan data.
#| code-summary: Munges stan data.
make_stan_data <- function(
    dat, 
    vars, 
    outcome, 
    beta_sd = c(2.5, rep(1, nXassign), 10, 2.5), 
    ctr = contr.orthonorm) {

  X <- make_X_design(dat, vars, ctr)
  
  nXassign <- sum(grepl("rand", colnames(X))) - 1

  y <- dat[[outcome]]
  N <- dim(X)[1]
  K <- dim(X)[2]  
  
    epoch  <- dat$epoch
  M_epoch  <- max(dat$epoch)
    region <- dat[["ctry_num"]]
  M_region <- max(region)
    site <- dat[["site_num"]]
  M_site <- max(site)
  region_by_site <- region_by_site <- dat %>% 
    dplyr::count(ctry_num, site_num) %>% 
    pull(ctry_num)
  
  list(N = N, K = K, X = X, y = y,
       M_region = M_region, region = region,
       M_site = M_site, site = site,
       M_epoch = M_epoch, epoch = epoch,
       region_by_site = region_by_site,
       beta_sd = beta_sd)
}
dat_full <- make_stan_data(
  dat = acs_itt_nona_dat, 
  vars    = c("inelgc3", "agegte60"),
  outcome = "D28_death")
```

## Analysis model

```{r}
#| label: model1-sampling
#| code-summary: Data and sampling
run_stan <- function(model, data)
{
  model[["sample"]](data = data,
                    seed = seed,
                    refresh = 0,
                    iter_warmup = 1000,
                    iter_sampling = 2500,
                    chains = 8,
                    parallel_chains = 8,
                    adapt_delta = 0.97)
}
stan_full <- run_stan(model_full, dat_full)
stan_full$summary(variables = c("beta", 
                                "beta_region", 
                                "gamma_site", "epsilon_site", "tau_site",
                                "gamma_epoch", "epsilon_epoch", "tau_epoch"))

```

```{r}
#| label: model-diagnostics
#| code-summary: Diagnostics
stan_full$cmdstan_diagnose()
```

```{r}
#| label: model-trace
#| code-summary: Trace plots
mcmc_trace(stan_full$draws("beta",          format = "matrix"))
mcmc_trace(stan_full$draws("beta_region",   format = "matrix"))
mcmc_trace(stan_full$draws("gamma_site",    format = "matrix"))
mcmc_trace(stan_full$draws("epsilon_site",  format = "matrix"))
mcmc_trace(stan_full$draws("tau_site",      format = "matrix"))
mcmc_trace(stan_full$draws("gamma_epoch",   format = "matrix"))
mcmc_trace(stan_full$draws("epsilon_epoch", format = "matrix"))
mcmc_trace(stan_full$draws("tau_epoch",     format = "matrix"))
```

```{r}
#| label: model-summaries
#| code-summary: Model parameter transformations

# Transform treatment contrasts back.
add_treatment_rvs <- function(rvs, mdat) {
  
  # Get the orthonormal contrasts.
  Ca <- cbind(1, attr(mdat$X, "contrasts")$randA) 
  Cc <- cbind(1, attr(mdat$X, "contrasts")$randC)
  nC <- ncol(Cc)
  # Get the treatment contrasts.
  Ct <-  cbind(1, contr.treatment(nC))
  trt_rows <- which(rownames(Cc) != "C0")
  
  rvs$eta <- as.vector(Cc %**% rvs$beta[1:nC])
  rvs$beta_uncon <- as.vector(Cc[, -1] %**% rvs$beta[2:nC])
  rvs$prob <- 1 / (1 + exp(-rvs$eta))
  rvs$beta_trt <- as.vector(
    transform_coding(Cc, Ct) %**% rvs$beta[1:nC])
  # names_trt <- rownames(Cc)[-grep(rownames(Cc), pattern = "C1")]
  rvs$OR <- setNames(exp(rvs$beta_trt[trt_rows][-1]), c("Intermediate", "Standard plus aspirin", "Therapeutic"))
  return(rvs)
}

# Extract the betas as a random variable type (using 'posterior' package)
rvs_beta   <- as_draws_rvars(stan_full$draws(c("beta")))
names(rvs_beta$beta) <- colnames(dat_full$X)
rvs_trt    <- add_treatment_rvs(rvs_beta, dat_full)[["OR"]]
rvs_region <- as_draws_rvars(stan_full[["draws"]](c("beta_region")))[[1]]
rvs_site   <- as_draws_rvars(stan_full[["draws"]](c("gamma_site")))[[1]]
rvs_epoch  <- as_draws_rvars(stan_full[["draws"]](c("gamma_epoch")))[[1]]

# Define names of random variables. 
map_labels <- function(data, num, lab)
{
  lab_map <- paste0(data[[num]], "_", data[[lab]])
  lab_map <- unique(lab_map)     
  lab_map <- as.data.frame(str_split(lab_map, pattern = "_", simplify = T))
  names(lab_map) <- c("number", "label")
  lab_map[["number"]] <- as.numeric(lab_map[["number"]])
  lab_map <- lab_map[order(lab_map[["number"]]),]
  lab_map
}

acs_itt_nona_dat[["site_nest"]] <- with(acs_itt_nona_dat, paste0(ctry,": ", site))

epoch_lab  <- map_labels(acs_itt_nona_dat, "epoch", "epoch_lab")
region_lab <- map_labels(acs_itt_nona_dat, "ctry_num", "ctry")
site_lab   <- map_labels(acs_itt_nona_dat, "site_num", "site")

names_agegrp <- "60+"
names_inlgc3 <- "Ineligible aspirin"

# Set names and exponentiation.
rvs_agegrp <- setNames(exp(rvs_beta[[1]]["agegte60"]), names_agegrp)  
rvs_inlgc3 <- setNames(exp(rvs_beta[[1]]["inelgc3"]), names_inlgc3)  
rvs_region <- setNames(exp(rvs_region), region_lab[["label"]])
rvs_site   <- setNames(exp(rvs_site),   site_lab[["label"]])
rvs_epoch  <- setNames(exp(rvs_epoch),  epoch_lab[["label"]])

# Combine random variables and tabulate.
rvs_all <- c(rvs_trt, rvs_inlgc3, rvs_agegrp, rvs_region)
```

```{r}
#| label: odds-ratio-summary-table-primary-model-save
#| code-summary: Odds ratio summary table
save_tex_table(
  odds_ratio_summary_table(rvs_all, "latex"),
  "outcomes/secondary/7-3-primary-model-acs-itt-summary-table")
odds_ratio_summary_table(rvs_all)
```

```{r}
#| label: odds-ratio-summary-primary-model-epoch-site-terms
#| code-summary: Epoch and site terms
p <- plot_epoch_site_terms(
  rvs_epoch, rvs_site, factor(dat_full$region_by_site, labels = c("India", "Australia\nNew Zealand", "Nepal")))
pth <- file.path("outputs", "figures", "outcomes", "secondary", "7-3-primary-model-epoch-site-terms.pdf")
ggsave(pth, p, width = 6, height = 4.5)
p
```
