---
title: "Shortness of breath at day 28 and day 90"
description: |
  Analyse of the shortness of breath secondary outcome (7.6) in ASCOT.
author: "Robert Mahar"
date: last-modified
---

# Preamble {#preamble}

```{r}
#| label: pkgs
#| code-summary: Load packages
library(tidyverse)
library(labelled)
library(kableExtra)
library(cmdstanr)
library(posterior)
library(bayestestR)
library(bayesplot)
library(matrixStats)
```

```{r}
#| label: data
#| code-summary: Prepare dataset
devtools::load_all()
all_dat <- read_all_no_daily()

# Full analysis set (intention-to-treat, including missing)
fas_itt_dat <- all_dat %>% 
  filter_fas_itt() %>%
  transmute_model_cols() %>% 
  left_join(all_dat %>% select(StudyPatientID, D28_BreathSinceGettingCovid), by = "StudyPatientID")

# Full analysis set (intention-to-treat, excluding missing)
fas_itt_nona_dat <- fas_itt_dat %>% 
  filter(!is.na(D28_BreathSinceGettingCovid)) 

# Anticoagulation set (intention-to-treat, including missing)
acs_itt_dat <- all_dat %>% 
  filter_acs_itt() %>%
  transmute_model_cols() %>% 
  left_join(all_dat %>% select(StudyPatientID, D28_BreathSinceGettingCovid), by = "StudyPatientID")

# Anticoagulation set (intention-to-treat, excluding missing)
acs_itt_nona_dat <- acs_itt_dat %>% 
  filter(!is.na(D28_BreathSinceGettingCovid))  
```

# Data checking

```{r}

with(acs_itt_nona_dat, table(D28_BreathSinceGettingCovid, CAssignment))
unknowns <- all_dat %>% filter(D28_BreathSinceGettingCovid == "Unknown")

# Remove patients with missing outcomes.
acs_itt_nona_dat <- acs_itt_nona_dat[-which(acs_itt_nona_dat[["D28_BreathSinceGettingCovid"]] == "Unknown"),]

# Check replace worked
with(acs_itt_nona_dat, table(D28_BreathSinceGettingCovid))

```



# Modelling

The analysis for shortness of breath is specified equivalently to that for the primary outcome. It includes intervention as randomised, age category, country, site nested within country, epoch, and intervention eligibility. The main analysis restricts the population to only those participants randomised to the anticoagulation domain.

```{r}
#| label: load-models
#| code-summary: Compiles stan models.
seed <- 59579
model_full <- cmdstan_model(file.path("stan", "primary_logistic_model_site_epoch.stan"))
```

```{r}
#| label: Munge stan data.
#| code-summary: Munges stan data.
make_stan_data <- function(dat, vars, outcome, beta_sd = c(2.5, rep(1, nXassign), 2.5, 10)) 
{
  X <- model.matrix(
     as.formula(paste("~", paste(vars, collapse = " + "))),
    data = dat,
    contrast = list(
      AAssignment = contr.orthonorm,
      CAssignment = contr.orthonorm)
  )
  
  nXassign <- sum(grepl("Assignment", colnames(X)))

  y <- dat[[outcome]]
  N <- dim(X)[1]
  K <- dim(X)[2]  
  
    epoch  <- dat$epoch
  M_epoch  <- max(dat$epoch)
    region <- dat[["ctry_num"]]
  M_region <- max(region)
    site <- dat[["site_num"]]
  M_site <- max(site)
  region_by_site <- region_by_site <- dat %>% 
    dplyr::count(ctry_num, site_num) %>% 
    pull(ctry_num)
  
  list(N = N, K = K, X = X, y = y,
       M_region = M_region, region = region,
       M_site = M_site, site = site,
       M_epoch = M_epoch, epoch = epoch,
       region_by_site = region_by_site,
       beta_sd = c(2.5, rep(1, nXassign), 2.5, 10))
}

dat_full <- make_stan_data(dat = acs_itt_nona_dat, 
                           vars    = c("CAssignment", "AAssignment", "agegte60_c", "inelgc3"),
                           outcome = "D28_BreathSinceGettingCovid")

dat_full[["y"]] <- ifelse(dat_full[["y"]] == "Yes", 1, 0)
```

## Analysis model

```{r}
#| label: model1-sampling
#| code-summary: Data and sampling

run_stan <- function(model, data)
{
  model[["sample"]](data = data,
                    seed = seed,
                    refresh = 0,
                    iter_sampling = 2500,
                    chains = 8,
                    parallel_chains = 8)
}

stan_full <- run_stan(model_full, dat_full)

stan_full$summary(variables = c("beta", 
                                "beta_region", 
                                "gamma_site", "epsilon_site", "tau_site",
                                "gamma_epoch", "epsilon_epoch", "tau_epoch"))

```

```{r}
#| label: model-diagnostics
#| code-summary: Diagnostics
stan_full$cmdstan_diagnose()
```

```{r}
#| label: model-trace
#| code-summary: Trace plots
mcmc_trace(stan_full$draws("beta",          format = "matrix"))
mcmc_trace(stan_full$draws("beta_region",   format = "matrix"))
mcmc_trace(stan_full$draws("gamma_site",    format = "matrix"))
mcmc_trace(stan_full$draws("epsilon_site",  format = "matrix"))
mcmc_trace(stan_full$draws("tau_site",      format = "matrix"))
mcmc_trace(stan_full$draws("gamma_epoch",   format = "matrix"))
mcmc_trace(stan_full$draws("epsilon_epoch", format = "matrix"))
mcmc_trace(stan_full$draws("tau_epoch",     format = "matrix"))
```

```{r}
#| label: model-summaries
#| code-summary: Model summaries

# Transform treatment contrasts back.
add_treatment_rvs <- function(rvs, mdat) {
  
  # Get the orthonormal contrasts.
  Ca <- cbind(1, attr(mdat$X, "contrasts")$AAssignment) 
  Cc <- cbind(1, attr(mdat$X, "contrasts")$CAssignment)
  nC <- ncol(Cc)
  # Get the treatment contrasts.
  Ct <-  cbind(1, contr.treatment(nC))
  trt_rows <- which(rownames(Cc) != "C0")
  
  rvs$eta <- as.vector(Cc %**% rvs$beta[1:nC])
  rvs$beta_uncon <- as.vector(Cc[, -1] %**% rvs$beta[2:nC])
  rvs$prob <- 1 / (1 + exp(-rvs$eta))
  rvs$beta_trt <- as.vector(
    transform_coding(Cc, Ct) %**% rvs$beta[1:nC])
  # names_trt <- rownames(Cc)[-grep(rownames(Cc), pattern = "C1")]
  rvs$OR <- setNames(exp(rvs$beta_trt[trt_rows][-1]), c("C2 vs C1", "C3 vs C1", "C4 vs C1"))
  rvs$OR <- c(rvs$OR, "C2 vs C4" = rvs$OR[1] / rvs$OR[3])
  return(rvs)
}

# Extract the betas as a random variable type (using 'posterior' package)
rvs_beta   <- as_draws_rvars(stan_full$draws(c("beta")))
rvs_trt    <- add_treatment_rvs(rvs_beta, dat_full)[["OR"]]
rvs_region <- as_draws_rvars(stan_full[["draws"]](c("beta_region")))[[1]]
rvs_site   <- as_draws_rvars(stan_full[["draws"]](c("gamma_site")))[[1]]
rvs_epoch  <- as_draws_rvars(stan_full[["draws"]](c("gamma_epoch")))[[1]]

# Define names of random variables. 
map_labels <- function(data, num, lab)
{
  lab_map <- paste0(data[[num]], "/", data[[lab]])
  lab_map <- unique(lab_map)     
  lab_map <- as.data.frame(str_split(lab_map, pattern = "/", simplify = T))
  names(lab_map) <- c("number", "label")
  lab_map[["number"]] <- as.numeric(lab_map[["number"]])
  lab_map <- lab_map[order(lab_map[["number"]]),]
}

acs_itt_nona_dat[["site_nest"]] <- with(acs_itt_nona_dat, paste0(ctry,": ", site))

epoch_lab  <- map_labels(acs_itt_nona_dat, "epoch", "epoch_lab")
region_lab <- map_labels(acs_itt_nona_dat, "ctry_num", "ctry")
site_lab   <- map_labels(acs_itt_nona_dat, "site_num", "site_nest")

names_agegrp <- "60+"
names_inlgc3 <- "Ineligible C3"

# Set names and exponentiation.
rvs_agegrp <- setNames(exp(rvs_beta[[1]][6]), names_agegrp)  
rvs_inlgc3 <- setNames(exp(rvs_beta[[1]][7]), names_inlgc3)  
rvs_region <- setNames(exp(rvs_region), region_lab[["label"]])
rvs_site   <- setNames(exp(rvs_site),   site_lab[["label"]])
rvs_epoch  <- setNames(exp(rvs_epoch),  epoch_lab[["label"]])

# Combine random variables and tabulate.
rvs_all <- c(rvs_trt, rvs_inlgc3, rvs_agegrp, rvs_region, rvs_site, rvs_epoch)

# Put the outcome table together.
make_outcome_table <- function(OR, format = "html", fn = NULL)
{
  out <- tibble(Parameter = names(OR),
                Mean = sprintf("%.2f", E(OR)),
                SD   = sprintf("%.2f", sd(OR)),
                Median = sprintf("%.2f", median(OR)),
                `95% CrI` = apply(quantile(OR, c(0.025, 0.975)), 2, function(x) 
                sprintf("(%.2f, %.2f)", x[1], x[2])),
                `Pr(OR < 1)` = sprintf("%.2f", Pr(OR < 1))) %>%
    kable(caption = "Model-estimated odds ratios for the shortness of breath at day 28.",
          format = format, digits = 2, booktabs = TRUE, linesep = "", align = "lrrrrr", longtable = TRUE) %>%
    kable_styling(latex_options = "HOLD_position", font_size = 8) %>%
    group_rows("Anticoagulation treatment", 1, 5) %>%
    group_rows("Age group", 6, 6) %>%
    group_rows("Country", 7, 10) %>%
    group_rows("Site", 11, 37) %>%
    group_rows("Epoch", 38, 49) %>%
    add_footnote("Note: Epoch is the 4-week interval relative to the most recently randomised participant.",
                 notation = "none", escape = TRUE)
  if (!is.null(fn) & format == "latex") {
    out
    save_tex_table(out, fn)
  } else {
    return(out)
  }
}

make_outcome_table(rvs_all)
make_outcome_table(rvs_all, format = "latex", fn = "7-6_shortness_of_breath")

# End of script.
```



