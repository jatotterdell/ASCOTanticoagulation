---
title: "7-7 mMRC Breathlessness scale"
description: |
  Analyse of the modified Medical Research Council breathlessness scale.
author: 
  - name: James Totterdell
    affiliation: University of Sydney
  - name: Rob Mahar
    affiliation: University of Melbourne
date: last-modified
---

# Preamble {#preamble}

```{r}
#| label: pkgs
#| code-summary: Load packages
library(tidyverse)
library(labelled)
library(kableExtra)
library(cmdstanr)
library(posterior)
library(bayestestR)
library(bayesplot)
library(matrixStats)
library(ggdist)

theme_set(theme_classic(base_size = 10, base_family = "Palatino") +
  theme(panel.grid = element_blank(),
        strip.background = element_blank()))
bayesplot_theme_set(theme_set(theme_classic(base_size = 10, base_family = "Palatino") +
  theme(panel.grid = element_blank(),
        strip.background = element_blank())))
```

```{r}
#| label: kable-hack
#| code-summary: Hack to make kable print in dark theme
# https://stackoverflow.com/questions/53247896/the-contents-of-kableextra-table-invisible-if-rstudio-editor-theme-is-dark
print.kableExtra <- function (x, ...) {
  view_html <- getOption("kableExtra_view_html", TRUE)
  if (view_html & interactive()) {
    dep <- list(
      rmarkdown::html_dependency_jquery(), 
      rmarkdown::html_dependency_bootstrap(theme = "cosmo"), 
      kableExtra::html_dependency_kePrint(), 
      kableExtra::html_dependency_lightable()
    )
    
    x <- sub('style="', 'style="color: black; ', as.character(x), fixed = TRUE)
        
    html_kable <- htmltools::browsable(
      htmltools::HTML(
        as.character(x), 
        "<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({tex2jax: {inlineMath: [[\"$\",\"$\"]]}})</script><script async src=\"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>"
      )
    )
    htmltools::htmlDependencies(html_kable) <- dep
    class(html_kable) <- "shiny.tag.list"
    print(html_kable)
  }
  else {
    cat(as.character(x))
  }
}
```

```{r}
#| label: data
#| code-summary: Prepare dataset
devtools::load_all()
all_dat <- read_all_no_daily()

breath_labels <-c("Only breathless with strenuous exercise",
                  "Short of breath when hurrying on level ground or walking up a slight hill",
                  "Walks slower than most people of the same age because of breathlessness on level",
                  "Stops for breath after walking about 100 metres or after a few minutes on level ground",
                  "Too breathless to leave the house, or breathless when dressing or undressing")

breath_labels_short <-c("Only breathless with strenuous exercise",
                     "Short of breath up a slight hill",
                     "Walks slower than most people of the same age",
                     "Stops for breath after walking about 100 metres",
                     "Too breathless to leave the house")

# Full analysis set (intention-to-treat, including missing)
fas_itt_dat <- all_dat %>% 
  filter_fas_itt() %>%
  transmute_model_cols_grp_aus_nz() %>% 
  left_join(all_dat %>% 
              select(StudyPatientID, D28_BreathSinceGettingCovid, D28_BreathScale, D28_death), 
            by = "StudyPatientID") %>%
  mutate(D28_BreathScale = D28_BreathScale + 1) %>%
  mutate(D28_BreathScale = factor(D28_BreathScale, 
                          levels = 1:5,
                          labels = breath_labels))

# Full analysis set (intention-to-treat, excluding missing)
fas_itt_nona_dat <- fas_itt_dat %>% 
  filter(!is.na(D28_BreathScale)) 

# Anticoagulation set (intention-to-treat, including missing)
acs_itt_dat <- all_dat %>% 
  filter_acs_itt() %>%
  transmute_model_cols_grp_aus_nz() %>% 
  left_join(all_dat %>%
              select(StudyPatientID, D28_BreathSinceGettingCovid, D28_BreathScale, D28_death), 
            by = "StudyPatientID") %>%
  mutate(D28_BreathScale = D28_BreathScale + 1)  %>%
  mutate(
    out_mmrc = case_when(
      D28_BreathSinceGettingCovid == "No" ~ 0,
      D28_BreathSinceGettingCovid == "Unknown" | is.na(D28_BreathScale) ~ NA_real_,
      TRUE ~ D28_BreathScale),
    out_mmrc_lab = fct_explicit_na(
      factor(out_mmrc, 
             levels = c(1:5, 0),
             labels = c(breath_labels_short, "Not asked")))
  ) %>%
  mutate(D28_BreathScale = factor(D28_BreathScale, 
                          levels = 1:5,
                          labels = breath_labels))

# Anticoagulation set (intention-to-treat, excluding missing)
acs_itt_nona_dat <- acs_itt_dat %>% 
  filter(!is.na(D28_BreathScale))
```

## Descriptive

The mMRC Breathlessness Scale was only asked of participants who reported that they had been "experiencing shortness of breath that is worse than or new since before they got COVID" (`D28_BreathSinceGettingCovid == Yes`). Therefore, the outcome as analysed is conditional on a patient having worse breathlessness than before.

Given that a patient who is not experiencing *worse* shortness of breath, may have still been experiencing *some* shortness of breath before they got COVID, it does not make sense to assign these participants to a score of 0 on the scale.

This means that most of the data is missing, as only about ~ 20% of participants responded "Yes" to experiencing worse shortness of breath. One option is to augment the scale and threat it as a measure of "worsening" of shortness of breath, where a "No" to `D28_BreathSinceGettingCovid` is taken as a score of -1, and for a "Yes", the score is taken as that reported for `D28_BreathScale`.

```{r}
#| label: po-component-ordinal
#| code-summary: Summarise the ordinal component
descriptive_table <- acs_itt_dat %>% 
  dplyr::count(CAssignment, out_mmrc_lab) %>%
  spread(CAssignment, n, fill = 0) %>%
  mutate(
    Overall = C1 + C2 + C3 + C4,
    across(C1:Overall, ~ sprintf("%i (%.0f)", .x, 100 * .x / sum(.x)))
  ) %>%
  rename(
    Standard = C1,
    Intermediate = C2,
    `Standard\nplus aspirin` = C3,
    Therapeutic = C4
  )

kable(
  descriptive_table,
  col.names = c("mMRC breathlessness scale (day 28)", names(descriptive_table)[-1]),
  caption = "Secondary endpoint breakdown - mMRC breathlessness scale (day 28).",
  align = "lrrrrr") %>%
  kable_styling(font_size = 11) %>%
  collapse_rows(1, valign = "top", latex_hline = 'custom', custom_latex_hline = 1)

tab <- kable(
  descriptive_table,
  format = "latex",
  booktabs = TRUE,
  escape = F,
  col.names = linebreak(c("mMRC breathlessness scale (day 28)", names(descriptive_table)[-1]), align = "c"),
  caption = "Secondary endpoint breakdown - mMRC breathlessness scale (day 28).",
  align = "lrrrrr") %>%
  kable_styling(font_size = 9, latex_options = "HOLD_position")
save_tex_table(tab, "outcomes/secondary/7-7_mmrc_scale_descriptive")
```

```{r, fig.width=10, fig.height=4}
#| label: graph-clogits-ordinal
#| code-summary: Graph the sample cumulative logits
acs_itt_nona_dat %>% 
  group_by(CAssignment, D28_BreathScale) %>%
  summarise(n = n()) %>%
  mutate(p = n/sum(n)) %>%
  select(-n) %>%
  spread(CAssignment, p, fill = 0) %>%
  mutate(across(C1:C4, ~ logit(cumsum(.x )))) %>%
  mutate(across(C2:C4, ~ .x/C1),
         across(C2:C4, ~ ifelse(.x == Inf, NA, .x))) %>% 
  select(-C1) %>%
  mutate(across(C2:C4, ~ .x/(mean(.x, na.rm = TRUE)))) %>%
  gather("id", "value", 2:4) %>%
  rename(Treatment = id, `Cumulative odds ratio` = value) %>%
  ggplot(., aes(reorder(D28_BreathScale, desc(D28_BreathScale)), `Cumulative odds ratio`, group = Treatment, col=Treatment)) + 
  geom_line() + geom_point() +  
  coord_flip() + 
  xlab("") + ylab("Mean centred cumulative odds ratio") + 
  labs(caption = "Note: cumulative odds for highest category do not exist.") +
  theme(plot.caption = element_text(hjust = 0))
```

# Modelling

The analysis for all cause mortality is specified equivalently to that for the primary outcome. It includes intervention as randomised, age category, country, site nested within country, epoch, and intervention eligibility. The main analysis restricts the population to only those participants randomised to the anticoagulation domain.

```{r}
#| label: load-models
#| code-summary: Compiles stan models.
seed <- 59579
model_tx           <- cmdstan_model(file.path("stan", "ordinal.stan"))
model_region       <- cmdstan_model(file.path("stan", "ordinal_region.stan"))
model_site         <- cmdstan_model(file.path("stan", "ordinal_site.stan"))
model_region_epoch <- cmdstan_model(file.path("stan", "ordinal_region_epoch.stan"))
model_site_epoch   <- cmdstan_model(file.path("stan", "ordinal_site_epoch_sap.stan"))
```

```{r}
#| label: functions-analysis.
#| code-summary: Defines functions for analysis.

# Makes stan data for ordinal outcome.
make_stan_data <- function(dat, vars, outcome, beta_sd) 
{
  X <- model.matrix(
     as.formula(paste("~", paste(vars, collapse = " + "))),
    data = dat)
  
  X <- X[,-1]
  y <- as.integer(dat[[outcome]])
  N <- dim(X)[1]
  K <- dim(X)[2]  
  J <- max(y)
  
    epoch  <- dat[["epoch"]]
  M_epoch  <- max(dat[["epoch"]])
    region <- as.integer(dat[["country"]])
  M_region <- max(region)
    site  <- dat[["site_num"]]
  M_site  <- length(levels(dat[["site"]]))
  
  list(N = N, K = K, X = X, y = y, J = J, p_par = rep(1, J),
       M_region = M_region, region = region,
       M_site = M_site, site = site,
       M_epoch = M_epoch, epoch = epoch, region_by_site = region_by_site,
       beta_sd = beta_sd)
}

# Wrapper to run stan
run_stan <- function(model, data)
{
  model[["sample"]](data = data,
                    seed = seed,
                    refresh = 0,
                    iter_sampling = 2500,
                    chains = 8,
                    parallel_chains = 8)
}

```

```{r}
# Relevel the antiviral assignment for stability.
acs_itt_nona_dat[["AAssignment"]] <- relevel(acs_itt_nona_dat[["AAssignment"]], "A0")

# Data with antiviral and anticoagulation assignment (and region, site, and epoch).
dat_tx <- make_stan_data(dat = acs_itt_nona_dat,
                           vars    = c("CAssignment", "AAssignment"),
                           outcome = "D28_BreathScale", 
                           beta_sd = c(1,1,1,1,1))

# 'data_tx' and age category
dat_tx_age <- make_stan_data(dat = acs_itt_nona_dat,
                             vars    = c("CAssignment", "AAssignment", "agegte60_c"),
                             outcome = "D28_BreathScale",
                             beta_sd = c(1,1,1,1,1,2.5))

# 'data_tx_age' and ineligibility.
dat_full <- make_stan_data(dat = acs_itt_nona_dat,
                            vars    = c("CAssignment", "AAssignment", "agegte60_c", "inelgc3"),
                            outcome = "D28_BreathScale",
                            beta_sd = c(1,1,1,1,1,2.5,10))
```

## Analysis models

```{r, eval = F, include = F}
#| label: model-treatment
#| code-summary: Treatment only model

stan_tx <- run_stan(model_tx, dat_tx)
stan_tx$cmdstan_diagnose()
stan_tx$summary(variables = c("p",
                              "alpha",
                              "beta")) 

```

```{r, eval = F, include = F}
#| label: model-treatment-age
#| code-summary: Treatment and age model

stan_tx_age <- run_stan(model_tx, dat_tx_age)
stan_tx_age$cmdstan_diagnose()
stan_tx_age$summary(variables = c("p",
                                  "alpha",
                                  "beta")) 

```

```{r, eval = F, include = F}
#| label: model-treatment-age
#| code-summary: Treatment, age, and ineligibility model

stan_tx_age_inlg <- run_stan(model_tx, data_full)
stan_tx_age_inlg$cmdstan_diagnose()
stan_tx_age_inlg$summary(variables = c("p",
                                       "alpha",
                                       "beta")) 

```

```{r}
#| label: model-site
#| code-summary: Full design model plus site

stan_region <- run_stan(model_region, dat_full)
stan_region$cmdstan_diagnose()
stan_region$summary(variables = c("p",
                                "alpha",
                                "beta",
                                "beta_region"))

```

```{r}
#| label: model-region-epoch
#| code-summary: Full design model plus region and epoch

stan_region_epoch <- run_stan(model_region_epoch, dat_full)
stan_region_epoch$cmdstan_diagnose()
stan_region_epoch$summary(variables = c("p",
                                "alpha",
                                "beta",
                                "beta_region",
                                "tau_epoch", "sigma_epoch", "epsilon_epoch"))

```

```{r}
#| label: model-site
#| code-summary: Full design model plus site

stan_site <- run_stan(model_site, dat_full)
stan_site$cmdstan_diagnose()
stan_site$summary(variables = c("p",
                                "alpha",
                                "beta",
                                "beta_region",
                                "xi_site", "sigma_site"))

```

```{r}
#| label: model-site-epoch
#| code-summary: Full design model plus site and epoch

stan_full <- run_stan(model_site_epoch, dat_full)
stan_full$cmdstan_diagnose()
stan_full$summary(variables = c("p",
                                "alpha",
                                "beta",
                                "beta_region",
                                "xi_site", "sigma_site",
                                "tau_epoch", "sigma_epoch", "epsilon_epoch"))

```





```{r}
#| label: model-trace
#| code-summary: Trace plots
mcmc_trace(stan_full$draws("p",             format = "matrix"))
mcmc_trace(stan_full$draws("alpha",         format = "matrix"))
mcmc_trace(stan_full$draws("beta",          format = "matrix"))
mcmc_trace(stan_full$draws("beta_region",   format = "matrix"))
mcmc_trace(stan_full$draws("xi_site",       format = "matrix"))
mcmc_trace(stan_full$draws("sigma_site",    format = "matrix"))
mcmc_trace(stan_full$draws("tau_epoch",     format = "matrix"))
mcmc_trace(stan_full$draws("sigma_epoch",   format = "matrix"))
mcmc_trace(stan_full$draws("epsilon_epoch",   format = "matrix"))

```

## Check region and site model estimates 
```{r}
get_rvs <- function(fit, var)
{
  as_draws_rvars(fit[["draws"]](var))[[var]]
}

check_ests <- function(region_ind) 
{
  p_cond <- do.call(cbind, sapply(1:27, function(x) ordered_logit(get_rvs(stan_site, "alpha") - 
                                                                     get_rvs(stan_site, "xi_site")[x])))
  p_marg  <- do.call(cbind, sapply(1:3, function(x) ordered_logit(get_rvs(stan_region, "alpha") -
                                                                       get_rvs(stan_region, "beta_region")[x])))
  # p_marg  <- logit(rvs_alpha$alpha) # marginal India p
  p_check <- acs_itt_nona_dat %>%
    filter(CAssignment == "C1") %>%
    dplyr::count(site, D28_BreathScale, .drop = F) %>%
    group_by(site) %>%
    mutate(p = n / sum(n)) %>%
    ungroup() %>%
    mutate(pred = as.vector(p_cond)) %>%
    mutate(D28_BreathScale = factor(D28_BreathScale, 
                            levels = breath_labels,
                            labels = breath_labels_short)) 
  site_list <- list(c("AMH", "APM", "BCM", "COR", "JIV", "LUD", "MAS", "PUN", "SAM", "SYM", "VEL"),
                    c("ALF", "AU other", "BXH", "CAM", "LIV", "MMC", "RMH", "RNS", "RPH", "WES", "WWB", "NZ other", "MID", "NSH"),
                    c("BHN", "TUT"))
  
  p_check <- p_check[p_check[["site"]] %in% site_list[[region_ind]],]
  p_check <- data.frame(p_check, "marg" = rep(p_marg[,region_ind], length(site_list[[region_ind]])))
  
  ggplot(p_check, aes(reorder(D28_BreathScale, desc(D28_BreathScale)), p)) +
    facet_wrap( ~ site) +
    geom_point(position = position_nudge(x = 0)) +
    geom_pointrange(aes(ymin = quantile(pred, 0.25), ymax = quantile(pred, 0.75), y = median(pred)),
                    colour = "red", position = position_nudge(x = 0.2),
                    fatten = 1.5) +
    geom_pointrange(aes(ymin = quantile(marg, 0.25), ymax = quantile(marg, 0.75), y = median(marg)),
                    colour = "blue", position = position_nudge(x = -0.2),
                    fatten = 1.5) + coord_flip() + 
    ylab("Proportion in category") + xlab("mMRC breathlessness scale (day 28)")
  
}

check_ests(1)
check_ests(2)
check_ests(3)

```

# Posterior predictive check

```{r,echo = F}


plot_ordinal_ppd <- function(variable, grouper)
{
  y_ppc <- as_draws_df(stan_region_epoch[["draws"]]("y_ppc"))[,-c((nrow(acs_itt_nona_dat)+1):(nrow(acs_itt_nona_dat)+3))]
  ppc_dat <- bind_cols(acs_itt_nona_dat, tibble(y_ppc = t(y_ppc))) %>%
    select(
      StudyPatientID,
      AAssignment,
      grouper,
      AgeAtEntry,
      inelgc3,
      ctry,
      site,
      epoch,
      variable,
      y_ppc)
  
  key <- with(ppc_dat, expand_grid("group" = levels(as.factor(ppc_dat[[grouper]])),
                                   "cat"   = levels(as.factor(ppc_dat[[variable]]))))
  f_1 <- function(x)
  {
    gp <- ppc_dat %>%
      group_by(as.factor(!!sym(grouper)), as.character(y_ppc[,x])) %>%
      summarise(n = n()) %>%
      mutate(freq = n / sum(n)) %>% select(-n)
    colnames(gp) <- c("group", "cat", "freq")
    gp <- gp %>% mutate(cat = factor(cat, levels = 1:5, labels = breath_labels))
    gp <- left_join(key, gp, by = c("group", "cat")) %>% select(freq)
    colnames(gp) <- NULL
    gp
  }
  
  gp_dat <- lapply(1:500, f_1)
  
  prop_dat <- do.call(cbind, gp_dat)
  prop_dat[is.na(prop_dat)] <- 0
  prop_dat <- rvar_apply(prop_dat, 1, rvar)
  prop_dat <- cbind(key, prop_dat)
  
  joiner <- ppc_dat %>%
    group_by(as.factor(!!sym(grouper)), !!sym(variable)) %>%
    summarise(n = n()) %>%
    mutate(freq = n / sum(n)) %>% select(-n)
  colnames(joiner) <- c("group", "cat", variable)
  
  joiner <- left_join(key, joiner, by = c("group", "cat"))
  joiner[is.na(joiner)] <- 0
  prop_dat <- left_join(prop_dat, joiner, by = c("group", "cat"))
  
  ggplot(prop_dat, aes(y = cat, xdist = prop_dat)) +
    facet_wrap(~ group) +
    stat_histinterval() +
    geom_point(aes_string(x = variable, y = "cat"), colour = 'red')

}

plot_ordinal_ppd(variable = "D28_BreathScale", grouper = "CAssignment")
plot_ordinal_ppd(variable = "D28_BreathScale", grouper = "AAssignment")
plot_ordinal_ppd(variable = "D28_BreathScale", grouper = "country")
plot_ordinal_ppd(variable = "D28_BreathScale", grouper = "site")
plot_ordinal_ppd(variable = "D28_BreathScale", grouper = "epoch")

```

```{r, eval = F}
#| label: model-summaries
#| code-summary: Model summaries

# Extract the betas as a random variable type (using 'posterior' package)
rvs_p      <- as_draws_rvars(stan_region_epoch[["draws"]](c("p")))
rvs_alpha  <- as_draws_rvars(stan_region_epoch[["draws"]](c("alpha")))
rvs_beta   <- as_draws_rvars(stan_region_epoch[["draws"]](c("beta")))
rvs_trt    <- setNames(exp(rvs_beta[["beta"]][2:4]), c("C2 vs C1", "C3 vs C1", "C4 vs C1"))
rvs_region <- as_draws_rvars(stan_region_epoch[["draws"]](c("beta_region")))[[1]]
rvs_epoch  <- as_draws_rvars(stan_region_epoch[["draws"]](c("tau_epoch")))[[1]]

# Define names of random variables. 
map_labels <- function(data, num, lab)
{
  lab_map <- paste0(data[[num]], ":", data[[lab]])
  lab_map <- unique(lab_map)     
  lab_map <- as.data.frame(str_split(lab_map, pattern = ":", simplify = T))
  names(lab_map) <- c("number", "label")
  lab_map[["number"]] <- as.numeric(lab_map[["number"]])
  lab_map <- lab_map[order(lab_map[["number"]]),]
}

acs_itt_nona_dat[["site_nest"]] <- with(acs_itt_nona_dat, paste0(ctry,": ", site))

epoch_lab  <- map_labels(acs_itt_nona_dat, "epoch", "epoch_lab")
region_lab <- map_labels(acs_itt_nona_dat, "ctry_num", "country")

names_agegrp <- "60+"
names_inlgc3 <- "Ineligible C3"

# Set names and exponentiation.
rvs_agegrp <- setNames(exp(rvs_beta[[1]][6]), names_agegrp)  
rvs_inlgc3 <- setNames(exp(rvs_beta[[1]][7]), names_inlgc3)  
rvs_region <- setNames(exp(rvs_region), region_lab[["label"]])
rvs_epoch  <- setNames(exp(rvs_epoch),  epoch_lab[["label"]])

# Combine random variables and tabulate.
rvs_all <- c(rvs_trt, rvs_inlgc3, rvs_agegrp, rvs_region, rvs_epoch)

# Put the outcome table together.
make_outcome_table <- function(OR, format = "html", fn = NULL)
{
  out <- tibble(Parameter = names(OR),
                Mean = sprintf("%.2f", E(OR)),
                SD   = sprintf("%.2f", sd(OR)),
                Median = sprintf("%.2f", median(OR)),
                `95% CrI` = apply(quantile(OR, c(0.025, 0.975)), 2, function(x) 
                sprintf("(%.2f, %.2f)", x[1], x[2])),
                `Pr(OR < 1)` = sprintf("%.2f", Pr(OR < 1))) %>%
    kable(caption = "Model-estimated odds ratios for the all-cause mortality at day 28.",
          format = format, digits = 2, booktabs = TRUE, linesep = "", align = "lrrrrr", longtable = TRUE) %>%
    kable_styling(latex_options = "HOLD_position", font_size = 8) %>%
    group_rows("Anticoagulation treatment", 1, 4) %>%
    group_rows("Age group", 5, 5) %>%
    group_rows("Country", 6, 8) %>%
    group_rows("Epoch", 9, 20) %>%
    add_footnote("Note: Epoch is the 4-week interval relative to the most recently randomised participant. Site ommitted from the model because of data sparsity.", notation = "none", escape = TRUE)
  if (!is.null(fn) & format == "latex") {
    out
    save_tex_table(out, fn)
  } else {
    return(out)
  }
}

# Save output

make_outcome_table(rvs_all) %>% kable_styling()
make_outcome_table(rvs_all, format = "latex", fn = "7-7_breathlessness_scale")
```

# End of script.
