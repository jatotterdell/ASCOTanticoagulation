---
title: Primary Outcome
subtitle: |
  Death from any cause or requirement of new intensive respiratory 
  support (invasive or non-invasive ventilation) or vasopressor/inotropic 
  support in the 28 days after randomisation.
description: |
  *Undertake the analysis of the primary outcome for ASCOT.*
author: "James Totterdell"
date: last-modified
---

# Preamble

```{r}
#| label: pkgs
#| code-summary: Load packages
library(tidyverse)
library(labelled)
library(kableExtra)
library(cmdstanr)
library(posterior)
library(bayestestR)
library(bayesplot)
library(matrixStats)
library(plotly)
library(lubridate)
library(ggdist)
library(patchwork)

theme_set(theme_minimal(base_size = 12))
bayesplot_theme_set(theme_minimal(base_size = 12))
color_scheme_set("red")
options(digits = 4)
```

```{r}
#| label: data
#| code-summary: Prepare dataset
devtools::load_all()
all_dat <- read_all_no_daily()

fas_itt_dat <- all_dat %>% 
  filter_fas_itt() %>%
  transmute_model_cols()
fas_itt_nona_dat <- fas_itt_dat %>% 
  filter(!is.na(PO))

acs_itt_dat <- all_dat %>% 
  filter_acs_itt() %>%
  transmute_model_cols()
acs_itt_nona_dat <- acs_itt_dat %>% 
  filter(!is.na(PO))
```

```{r}
#| label: models
#| code-summary: Load models
logistic_mod <- cmdstan_model("stan/logistic_bernoulli.stan")
noepoch_mod <- cmdstan_model("stan/primary_logistic_model_site.stan")
primary_mod <- cmdstan_model("stan/primary_logistic_model_site_epoch.stan")
# logistic_subgrp_mod <- cmdstan_model("stan/logistic_subgroup.stan")
# logistic_subgrp_multi_mod <- cmdstan_model("stan/logistic_subgroup_multi.stan")
```

```{r}
#| label: model-data-for-acs-itt
#| code-summary: Setup ACS-ITT datasets and functions
make_model_data_trt_only <- function(dat) {
  X <- model.matrix(
     ~ CAssignment + AAssignment,
    data = dat,
    contrast = list(
      AAssignment = contr.orthonorm,
      CAssignment = contr.orthonorm)
  )
  y <- as.integer(dat$PO)
  N <- dim(X)[1]
  K <- dim(X)[2]  
  list(N = N, K = K, X = X, y = y, beta_sd = c(2.5, rep(1, ncol(X) - 1)))
}


make_model_data_noepochsite <- function(dat) {
  X <- model.matrix(
     ~ CAssignment + AAssignment + agegte60_c + country + inelgc3,
    data = dat,
    contrast = list(
      CAssignment = contr.orthonorm,
      CAssignment = contr.orthonorm
    )
  )
  nXassign <- sum(grepl("Assignment", colnames(X)))
  y <- as.integer(dat$PO)
  N <- dim(X)[1]
  K <- dim(X)[2]  
  list(N = N, K = K, X = X, y = y, 
       beta_sd = c(2.5, rep(1, nXassign), 2.5, 1, 1, 1, 10))
}

make_model_data_noepoch <- function(dat) {

  region <- dat$ctry_num
  M_region <- max(region)
  site <- dat$site_num
  M_site <- max(site)
  region_by_site <-   region_by_site <- dat %>% 
    dplyr::count(ctry_num, site_num) %>% 
    pull(ctry_num)
  
  X <- model.matrix(
     ~ CAssignment + AAssignment + agegte60_c + inelgc3,
    data = dat,
    contrast = list(
      AAssignment = contr.orthonorm,
      CAssignment = contr.orthonorm
    )
  )
  nXassign <- sum(grepl("Assignment", colnames(X)))
  y <- as.integer(dat$PO)
  N <- dim(X)[1]
  K <- dim(X)[2]  
  list(N = N, K = K, X = X, y = y,
       M_region = M_region, region = region,
       M_site = M_site, site = site,
       region_by_site = region_by_site,
       beta_sd = c(2.5,  rep(1, nXassign), 2.5, 10))
}

make_model_data_primary <- function(dat) {

  epoch <- dat$epoch
  M_epoch <- max(dat$epoch)
  region <- dat$ctry_num
  M_region <- max(region)
  site <- dat$site_num
  M_site <- max(site)
  region_by_site <- dat %>% 
    dplyr::count(ctry_num, site_num) %>% 
    pull(ctry_num)
  
  X <- model.matrix(
     ~ CAssignment + AAssignment + agegte60_c + inelgc3,
    data = dat,
    contrast = list(
      AAssignment = contr.orthonorm,
      CAssignment = contr.orthonorm
    )
  )
  nXassign <- sum(grepl("Assignment", colnames(X)))
  y <- as.integer(dat$PO)
  N <- dim(X)[1]
  K <- dim(X)[2]  
  list(N = N, K = K, X = X, y = y,
       M_region = M_region, region = region,
       M_site = M_site, site = site,
       M_epoch = M_epoch, epoch = epoch,
       region_by_site = region_by_site,
       beta_sd = c(2.5, rep(1, nXassign), 2.5, 10))
  
}
```

```{r}
#| label: helper-functions
#| code-summary: Helper functions

add_treatment_rvs <- function(rvs, mdat) {
  
  Ca <- cbind(1, attr(mdat$X, "contrasts")$AAssignment)
  Cc <- cbind(1, attr(mdat$X, "contrasts")$CAssignment)
  nC <- ncol(Cc)
  Ct <-  cbind(1, contr.treatment(nC))
  trt_rows <- which(rownames(Cc) != "C0")
  
  rvs$eta <- as.vector(Cc %**% rvs$beta[1:nC])
  rvs$beta_uncon <- as.vector(Cc[, -1] %**% rvs$beta[2:nC])
  rvs$prob <- 1 / (1 + exp(-rvs$eta))
  rvs$beta_trt <- as.vector(
    transform_coding(Cc, Ct) %**% rvs$beta[1:nC])
  rvs$OR <- setNames(exp(rvs$beta_trt[trt_rows][-1]), c("C2 vs C1", "C3 vs C1", "C4 vs C1"))
  rvs$OR <- c(rvs$OR, "C2 vs C4" = rvs$OR[1] / rvs$OR[3])
  return(rvs)
}


plot_or_densities <- function(rvs) {
  tibble(Contrast = fct_inorder(names(rvs)), RV = rvs) %>% 
  ggplot(., aes(y = Contrast, xdist = RV)) + 
  stat_halfeye(
    aes(fill = 
          stat(cut_cdf_qi(
            cdf, 
            .width = c(.5, .8, .95, 0.99), 
            labels = scales::percent_format()))),
    adjust = 1, n = 1001, .width = c(0.5, 0.8, 0.95)
    ) + 
  scale_fill_brewer(
    palette = "Reds",
    direction = -1, 
    na.translate = FALSE) + 
  labs(
    x = "Odds ratio contrast",
    fill = "Interval"
  ) +
  scale_x_log10(breaks = c(0.1, 0.25, 0.5, 1, 2, 4, 10)) + 
  geom_vline(xintercept = 1)
}


odds_ratio_summary_table <- function(OR, format = "html", fn = NULL) {
  out <- tibble(
    Parameter = names(OR),
    `Pr(OR < 1)` = Pr(OR < 1),
    Median = median(OR),
    Mean = E(OR),
    `95% CrI` = apply(
      quantile(OR, c(0.025, 0.975)), 2, 
      function(x) sprintf("(%.2f, %.2f)", x[1], x[2]))
  ) %>%
  kable(
    format = format, 
    digits = 2, 
    align = "lrrrr",
    booktabs = TRUE) %>%
  kable_styling(bootstrap_options = "striped", latex_options = "HOLD_position")
  if (!is.null(fn) & format == "latex") {
    save_tex_table(out, fn)
  } else {
    return(out)
  }
}
```

# Outline

This document presents the results of analyses of the primary outcome. The first section introduces the primary outcome definition and it's derivation from the database fields. Descriptive analyses are then presented followed by the model-based analyses.

For the model-based analyses, results are presented for each population and sub-model.

# Primary Outcome Definition

The primary outcome is a composite of death, need for new respiratory support, or vasopressor/inotropic support. From the protocol:

> Death from any cause or requirement of new intensive respiratory support (invasive or non-invasive ventilation) or vasopressor/inotropic support in the 28 days after randomisation. This includes any participant who receives non-invasive mechanical ventilation (either CPAP or BIPAP, apart from the below considerations) any time after enrolment even if not transferred to ICU. It does NOT include the use of humidified high-flow nasal prong oxygen.
>
> Participants on pre-existing home BiPAP or CPAP will not be considered to have met the primary outcome unless they have either:
>
> -   required invasive mechanical ventilation (i.e. intubation), or
> -   graduated from CPAP only whilst asleep to BiPAP at any time, or
> -   graduated from BiPAP only whilst asleep to BiPAP for \>12 hours/day, or
> -   died by day 28
>
> There may be cases where a patient has been assessed as requiring intensive respiratory support (invasive or non-invasive ventilation) or vasopressor/inotropic support, but the patient or family declined treatment and the patient was discharged home. If attempts to obtain 28-day data are unsuccessful or not possible, and the investigator had deemed at the time of discharge that the patient would be highly likely to die within 28 days from randomisation, these participants will be deemed to have met the primary outcome.

# Derivation of the Outcome

Derivation of the outcome requires checking of the daily, discharge, and day 28 data extracts. On the daily data, there is a variable `DD_PrimaryEndpointReachedToday` however this was coded incorrectly in the original database and therefore fails to capture some participants. Additionally, given the composite nature of the outcome it is useful to check all components individually as well as the composite outcome. Therefore, this variable is not used in the derivation, but is included as a cross-check.

Below, each component is summarised in aggregate.

## Day 28 mortality

There were 50 participants who had died by day 28, 40 were are reported as a discharge status of death and 10 were reported as a death post-discharge. Day 28 mortality was missing or unknown for 30 participants.

```{r}
#| label: po-component-death
#| code-summary: Summarise the death component
mort_table <- all_dat %>%
  filter_acs_itt() %>%
  group_by(CAssignment) %>%
  summarise(
    `Mortality_Alive at day 28_` = sum(1 - D28_death, na.rm = TRUE),
    `Mortality_Death within 28 days_Total` = sum(D28_death, na.rm = TRUE),
    `Mortality_Death within 28 days_Prior to discharge` = sum(DIS_death & DIS_day <= 28, na.rm = TRUE),
    `Mortality_Death within 28 days_Post-discharge` = sum(D28_death == 1 & DIS_death == 0, na.rm = TRUE),
    `Mortality_Unknown_` = sum(is.na(D28_death))
  ) %>%
  gather(key, Frequency, -CAssignment, factor_key = T) %>%
  spread(CAssignment, Frequency) %>%
  separate(key, into = c("Measure", "Outcome", "Breakdown"), sep = "_") %>%
  mutate(
    Overall = C1 + C2 + C3 + C4,
    across(C1:Overall, ~ sprintf("%i (%.0f)", .x, 100 * .x / sum(.x[c(1,2,5)])))
  )
kable(
  mort_table %>% select(-1),
  caption = "Composite primary endpoint breakdown - mortality.",
  align = "llrrrrr") %>%
  kable_styling(font_size = 11) %>%
  collapse_rows(1, valign = "top", latex_hline = 'custom', custom_latex_hline = 1) %>%
  group_rows("Mortality", 1, nrow(mort_table))
```

## Vasopressor/inotropic requirement

Vasopressor/inotropic support is reported on both the daily (from day 1 to discharge) and the day 28 (from discharge to day 28) extracts. There were 39 participants who required vasopressor/inotropic support. Of these, 21 were reported between discharge and day 28, 20 were reported prior to discharge, and 2 were reported for both. The component was missing for 35 participants. Either due to missing information at day 28 or due to missing daily information.

```{r}
#| label: po-component-vasopressor
#| code-summary: Summarise the vasopressor/inotropes component
vaso_table <- all_dat %>%
  filter_acs_itt() %>%
  group_by(CAssignment) %>%
  summarise(
    `Vasopressor/inotropes_Not required_` = sum(1 - ANY_vasop, na.rm = TRUE),
    `Vasopressor/inotropes_Use within 28 days_Total` = sum(ANY_vasop, na.rm = TRUE),
    `Vasopressor/inotropes_Use within 28 days_Prior to discharge` = sum(DD_vasop, na.rm = TRUE),
    `Vasopressor/inotropes_Use within 28 days_Post-discharge` = sum(D28_vasop, na.rm = TRUE),
    `Vasopressor/inotropes_Unknown_` = sum(is.na(ANY_vasop))
  ) %>%
  gather(key, Frequency, -CAssignment, factor_key = T) %>%
  spread(CAssignment, Frequency) %>%
  separate(key, into = c("Measure", "Outcome", "Breakdown"), sep = "_") %>%
  mutate(
    Overall = C1 + C2 + C3 + C4,
    across(C1:Overall, ~ sprintf("%i (%.0f)", .x, 100 * .x / sum(.x[c(1,2,5)])))
  )
kable(
  vaso_table %>% select(-1),
  caption = "Composite primary endpoint breakdown - vasopressor/inotropes.",
  align = "llrrrr") %>%
  kable_styling(font_size = 11) %>%
  collapse_rows(1, valign = "top", latex_hline = 'custom', custom_latex_hline = 1) %>%
  group_rows("Vasopressor/inotropes", 1, nrow(vaso_table))
```

## New intensive respiratory support

Respiratory support is reported on both the daily (from day 1 to discharge) and the day 28 (at day 28) extracts. There were 70 participants who required new intensive respiratory support. Of these, 60 were prior to discharge, 6 were reported at day 28, and 4 were both. The outcome was unknown for 36 participants due to either missing day 28 information (34) or missing daily information (2).

```{r}
#| label: po-component-respiratory
#| code-summary: Summarise the ventilation component
vent_table <- all_dat %>%
  filter_acs_itt()  %>%
  group_by(CAssignment) %>%
  summarise(
    `Ventilation_Not required_` = sum(1 - ANY_vent, na.rm = TRUE),
    `Ventilation_Use within 28 days_Total` = sum(ANY_vent, na.rm = TRUE),
    `Ventilation_Use within 28 days_Prior to discharge` = sum(ANY_DD_vent, na.rm = TRUE),
    `Ventilation_Use within 28 days_Post-discharge` = sum(D28_vent, na.rm = TRUE),
    `Ventilation_Unknown_` = sum(is.na(ANY_vent))
  ) %>%
  gather(key, Frequency, -CAssignment, factor_key = T) %>%
  spread(CAssignment, Frequency) %>%
  separate(key, into = c("Measure", "Outcome", "Breakdown"), sep = "_") %>%
  mutate(
    Overall = C1 + C2 + C3 + C4,
    across(C1:Overall, ~ sprintf("%i (%.0f)", .x, 100 * .x / sum(.x[c(1, 2, 5)])))
  )
kable(
  vent_table %>% select(-1),
  caption = "Composite primary endpoint breakdown - respiratory support.",
  align = "llrr") %>%
  kable_styling(font_size = 11) %>%
  collapse_rows(1, valign = "top", latex_hline = 'custom', custom_latex_hline = 1) %>%
  group_rows("Ventilation", 1, nrow(vent_table))
```

## DAMA and Likely to Die

There were 3 participants who were DAMA and identified as likely to die. However, the day 28 status was observed for all 3 participants, therefore, no-one met the primary endpoint due to DAMA and unknown day 28 status.

```{r}
#| label: po-components-dama
#| code-summary: Summarise the DAMA component
all_dat %>%
  filter_acs_itt()  %>%
  select(DIS_DAMA, DIS_DAMAlikelytodie, D28_death) %>%
  dplyr::count(DIS_DAMA, DIS_DAMAlikelytodie, D28_death) %>%
  spread(D28_death, n) %>%
  kable(
    col.names = c("DAMA", "Likely to die by day 28", "No", "Yes", "(Missing)")
  ) %>%
  kable_styling() %>%
  add_header_above(c(" " = 2, "Death by day 28" = 3))
```

## Composite

There were 107 (7% of observed outcomes) participants who met the composite outcome and 36 (2% of all outcomes) participants whose outcome was unknown. Of the 107 who met the outcome, 12 met all three criteria (death, vasopressor, ventilation) and the remaining met some subset of them. Of the 36 with missing outcome, 26 were missing all three components.

```{r}
#| label: tbl-po-composite
#| code-summary: Summarise the composite
#| tbl-cap: |
#|   Composite primary endpoint breakdown - overall.
comp_table <- all_dat %>%
  filter_acs_itt()  %>%
  group_by(CAssignment) %>%
  summarise(
    `Primary Outcome_No_`  = sum(1 - PO, na.rm = TRUE),
    `Primary Outcome_Yes_` = sum(PO, na.rm = TRUE),
    `Primary Outcome_Unknown_Total` = sum(is.na(PO)),
    `Primary Outcome_Unknown_Day 28 status` = sum(is.na(PO) & is.na(D28_death)),
    `Primary Outcome_Unknown_Vasopressor/inotropes` = 
      sum(is.na(PO) & !is.na(D28_death) & is.na(ANY_vasop))
  ) %>%
  gather(key, Frequency, -CAssignment, factor_key = T) %>%
  spread(CAssignment, Frequency) %>%
  separate(key, into = c("Measure", "Outcome", "Breakdown"), sep = "_") %>%
  mutate(
    Overall = C1 + C2 + C3 + C4,
    across(C1:Overall, ~ sprintf("%i (%.0f)", .x, 100 * .x / sum(.x[1:3])))
  )
kable(
  comp_table %>% select(-1),
  align = "llrr") %>%
  kable_styling(font_size = 11) %>%
  collapse_rows(1, valign = "top", latex_hline = 'custom', custom_latex_hline = 1) %>%
  group_rows("Primary outcome", 1, nrow(comp_table))
```


```{r}
#| label: tbl-po-composite-all
#| code-summary: Summarise the all components
#| tbl-cap: |
#|   Composite primary endpoint breakdown.
tab <- bind_rows(comp_table, mort_table, vaso_table, vent_table)
tab_head <- all_dat %>% 
  filter_acs_itt() %>% 
  dplyr::count(CAssignment = factor(CAssignment, labels = intervention_labels()$CAssignment[-1])) %>%
  mutate(label = paste0(CAssignment, "<br>(n = ", n, ")")) %>%
  pull(label) %>%
  c(paste0("Overall<br><br>(n = ", nrow(all_dat %>% filter_acs_itt()), ")"))
colnames(tab)[4:8] <- tab_head
kable(
  tab %>% select(-1),
  align = "llrrrrr",
  escape = F) %>%
  kable_styling(font_size = 11) %>%
  collapse_rows(1, valign = "top", latex_hline = 'custom', custom_latex_hline = 1) %>%
  group_rows("Primary outcome", 1, nrow(comp_table)) %>%
  group_rows("Mortality", nrow(comp_table) + 1, nrow(comp_table) + nrow(mort_table)) %>%
  group_rows("Vasopressor/inotropes", 11, 15) %>%
  group_rows("Ventilation", 16, 20)
```

```{r}
#| label: save-composite-primary-table
#| code-summary: Save table to outputs
colnames(tab)[4:8] <- linebreak(tab_head, align = "c", linebreaker = "<br>")
out <- kable(
  tab %>% select(-1),
  format = "latex",
  align = "llrrrrr",
  booktabs = TRUE,
  escape = F) %>%
  kable_styling(font_size = 9, latex_options = "HOLD_position") %>%
  collapse_rows(1, valign = "top", latex_hline = 'none') %>%
  group_rows("Primary outcome", 1, nrow(comp_table)) %>%
  group_rows("Mortality", nrow(comp_table) + 1, nrow(comp_table) + nrow(mort_table)) %>%
  group_rows("Vasopressor/inotropes", 11, 15) %>%
  group_rows("Ventilation", 16, 20)
save_tex_table(out, fn = "primary/composite-breakdown")
```


```{r}
#| label: tbl-po-composite-combinations
#| code-summary: Summarise the component combinations
#| tbl-cap: |
#|   Observed outcome combinations.
levs <- c("None", "Death + Vas./Ino. + Ventilation", "Death + Vas./Ino.", "Death + Ventilation", "Vas./Ino. + Ventilation", 
          "Death", "Vas./Ino.", "Ventilation", "Unknown")
tab <- all_dat %>%
  filter_acs_itt()  %>%
  group_by(CAssignment) %>%
  summarise(
    `Composite outcomes` = case_when(
      PO == 0 ~ 0,
      is.na(PO) ~ 99,
      D28_death == 1 & ANY_vasop == 1 & ANY_vent == 1 ~ 1,
      D28_death == 1 & ANY_vasop == 1 & ANY_vent == 0 ~ 2,
      D28_death == 1 & ANY_vasop == 0 & ANY_vent == 1 ~ 3,
      D28_death == 0 & ANY_vasop == 1 & ANY_vent == 1 ~ 4,
      D28_death == 1 ~ 5,
      ANY_vasop == 1 ~ 6,
      ANY_vent == 1 ~ 7,
    )) %>%
  dplyr::count(CAssignment, `Composite outcomes`) %>%
  mutate(`Composite outcomes` = factor(`Composite outcomes`, levels = c(0:7, 99), labels = levs)) %>%
  spread(CAssignment, n, fill = 0) %>%
  mutate(Overall = C1 + C2 + C3 + C4)
```

# Descriptive Analyses

## Age

```{r}
#| label: fig-age-po
#| code-summary: Relationship age to outcome
#| fig-cap: |
#|   Relationship (logistic regression linear in age) 
#|   between age at entry and the primary outcome.
agedat <- all_dat %>% 
  filter(ENR_rec == 1, WTH_FU == 0) %>%
  dplyr::count(PO, AgeAtEntry) %>% 
  spread(PO, n, fill = 0) %>% 
  mutate(p = `1` / (`1` + `0`))
agemod <- glm(
  cbind(`1`, `0`) ~ AgeAtEntry, 
  data = agedat, 
  family = binomial())
agedat <- agedat %>%
  mutate(
    ypred = predict(agemod, newdata = agedat, type = "response")
  )
p <- ggplot(agedat, aes(AgeAtEntry, p)) +
    geom_point() +
    geom_line(aes(y = ypred)) +
    labs(y = "Proportion with outcome", x = "Age at entry")
ggplotly(p)
```

```{r}
#| label: tbl-age
#| code-summary: Relationship age 60+ to outcome
#| tbl-cap: |
#|   Relationship between age >= 60 and the primary outcome.
all_dat %>%
  filter(ENR_rec == 1, WTH_FU == 0) %>%
  dplyr::count(`Age 60+` = agegte60, PO) %>%
  group_by(`Age 60+`) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

## Country

```{r}
#| label: tbl-country-po
#| code-summary: Relationship country to outcome
#| tbl-cap: Primary outcome by country.
all_dat %>%
  filter(ENR_rec == 1, WTH_FU == 0) %>%
  dplyr::count(Country = PT_CountryName, PO) %>%
  group_by(Country) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

## Site

```{r}
#| label: tbl-site-po
#| code-summary: Relationship site to outcome
#| tbl-cap: Primary outcome by site within country.
tabdat <- all_dat %>%
  filter(ENR_rec == 1, WTH_FU == 0) %>%
  dplyr::count(
    Country = PT_CountryName, 
    Site = PT_LocationName, 
    PO) %>%
  group_by(Country, Site) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  ungroup()
n_country <- tabdat %>% 
  dplyr::count(Country) %>%
  pull(n)
cn <- cumsum(n_country)
tabdat %>%
  select(-Country) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped") %>%
  pack_rows("Australia", 1, cn[1]) %>%
  pack_rows("India", cn[1] + 1, cn[2]) %>%
  pack_rows("Nepal", cn[2] + 1, cn[3]) %>%
  pack_rows("New Zealand", cn[3] + 1, cn[4])
```

## Calendar Time

```{r}
#| label: fig-cal-po
#| code-summary: Relationship calendar date to outcome
#| fig-cap: |
#|   Relationship between calendar date and the primary outcome.
caldat <- all_dat %>% 
  filter(ENR_rec == 1, WTH_FU == 0) %>%
  dplyr::count(PO, yr = year(RandDate), mth = month(RandDate)) %>% 
  spread(PO, n, fill = 0) %>% 
  mutate(p = `1` / (`1` + `0`))
p <- ggplot(caldat, aes(mth, p)) +
  facet_wrap( ~ yr, drop = T) +
    geom_point() +
    labs(
      y = "Proportion with outcome", 
      x = "Calendar date (year and month)") +
  scale_x_continuous(breaks = 1:12) +
  ylim(0, 0.25)
ggplotly(p)
```

## Days since symptom onset

```{r}
#| label: fig-dsfs-po
#| code-summary: Relationship days since sympton onset to outcome
#| fig-cap: |
#|   Relationship (logistic regression linear) 
#|   between days since symptom onset at entry and the primary outcome.
dsfsdat <- fas_itt_dat %>%
  dplyr::count(PO, dsfs) %>% 
  spread(PO, n, fill = 0) %>% 
  mutate(p = `1` / (`1` + `0`))
dsfsmod <- glm(
  cbind(`1`, `0`) ~ dsfs, 
  data = dsfsdat, 
  family = binomial())
dsfsdat <- dsfsdat %>%
  mutate(
    ypred = predict(dsfsmod, newdata = dsfsdat, type = "response")
  )
p <- ggplot(dsfsdat, aes(dsfs, p)) +
    geom_point() +
    geom_line(aes(y = ypred)) +
    labs(y = "Proportion with outcome", x = "Days since onset")
ggplotly(p)
```

```{r}
#| label: tbl-dsfs
#| code-summary: Relationship days since sympton onset > 7 to outcome
#| tbl-cap: |
#|   Relationship between days since sympton onset > 7 and the primary outcome.
fas_itt_dat %>%
  dplyr::count(`DSFS > 7` = dsfsgt7, PO) %>%
  group_by(`DSFS > 7`) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

## Oxygen

```{r}
#| label: tbl-on-room-air
#| code-summary: Relationship of on room air at baseline to outcome
#| tbl-cap: |
#|   Relationship between on room air and the primary outcome.
all_dat %>%
  filter_fas_itt() %>%
  dplyr::count(BAS_OnRoomAir24hrsUnknown, BAS_OnRoomAir24hrs, PO) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

```{r}
#| label: fig-oxygen-sat
#| code-summary: Relationship oxygen saturation to outcome
#| fig-cap: |
#|   Relationship (logistic regression linear) 
#|   between oxygen saturation at entry and the primary outcome.
podat <- fas_itt_dat %>%
  dplyr::count(PO, oxygen_sat) %>% 
  spread(PO, n, fill = 0) %>% 
  mutate(p = `1` / (`1` + `0`))
pomod <- glm(
  cbind(`1`, `0`) ~ I(oxygen_sat - 94), 
  data = podat, 
  family = binomial())
podat <- podat %>%
  mutate(
    ypred = predict(pomod, newdata = podat, type = "response")
  )
p <- ggplot(podat, aes(oxygen_sat, p)) +
    geom_point() +
    geom_line(aes(y = ypred)) +
    labs(y = "Proportion with outcome", x = "Days since onset")
ggplotly(p)
```

## Weight

```{r}
#| label: fig-weight
#| code-summary: Relationship weight to outcome
#| fig-cap: |
#|   Relationship (logistic regression linear) 
#|   between weight at entry and the primary outcome.
weightdat <- fas_itt_dat %>%
  filter(!is.na(weight), !is.na(PO)) %>%
  select(Sex, weight, PO)
weightdatprop <- weightdat %>%
  group_by(Sex, weight) %>%
  summarise(p = mean(PO))
weightmod <- glm(
  PO ~ Sex * I(weight - mean(weight, na.rm = T)), 
  data = weightdat, 
  family = binomial())
weightdat <- weightdat %>%
  mutate(
    ypred = predict(weightmod, newdata = weightdat, type = "response")
  )
p <- ggplot(weightdat, aes(weight, p)) +
  facet_wrap( ~ Sex) +
    geom_point(data = weightdatprop) +
    geom_line(aes(y = ypred)) +
    labs(y = "Proportion with outcome", x = "Days since onset")
ggplotly(p)
```

```{r}
#| label: tbl-weight
#| code-summary: Relationship weight > 120 kg to outcome
#| tbl-cap: |
#|   Relationship between weight > 120 kg and the primary outcome.
fas_itt_dat %>%
  dplyr::count(`Weight > 120 kg` = weightgt120, PO) %>%
  group_by(`Weight > 120 kg`) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

## Anti-coagulation Domain

```{r}
#| label: tbl-domainC-po
#| code-summary: Relationship anti-coagulation to outcome
#| tbl-cap: Primary outcome by anti-coagulation intervention.
make_po_table <- function(dat, format = "html") {
  tab <- dat %>%
    mutate(CAssignment = factor(CAssignment, labels = intervention_labels()$CAssignment[-1])) %>%
    group_by(CAssignment) %>%
    summarise(
      Randomised = n(),
      `Outcome missing` = sprintf("%i (%.1f)", sum(is.na(PO)), 100 * mean(is.na(PO))),
      `Outcome observed` = sprintf("%i (%.1f)", sum(!is.na(PO)), 100 * mean(!is.na(PO))),
      `Met primary outcome` = sprintf("%i (%.1f)", sum(PO, na.rm = TRUE), 100 * mean(PO, na.rm = TRUE)),
    ) %>%
    bind_rows(
      dat  %>%
        group_by(CAssignment = "Overall") %>%
        summarise(
          Randomised = n(),
          `Outcome missing` = sprintf("%i (%.1f)", sum(is.na(PO)), 100 * mean(is.na(PO))),
          `Outcome observed` = sprintf("%i (%.1f)", sum(!is.na(PO)), 100 * mean(!is.na(PO))),
          `Met primary outcome` = sprintf("%i (%.1f)", sum(PO, na.rm = TRUE), 100 * mean(PO, na.rm = TRUE)),
      )
    ) %>%
    mutate(CAssignment = fct_inorder(CAssignment)) %>%
    gather(key, value, -CAssignment, factor_key = T) %>%
    spread(CAssignment, value)
  colnames(tab)[1] <- "n (\\%)"
  if(format == "latex") {
    colnames(tab) <- linebreak(colnames(tab), align = "c", linebreaker = "<br>")
  }
    kable(tab,
      format = format,
      align = "lrrrrr",
      escape = FALSE,
      booktabs = TRUE
    ) %>%
    kable_styling(font_size = 10, latex_options = "HOLD_position")  
}
make_po_table(
    all_dat %>%
      filter_acs_itt()
)
save_tex_table(make_po_table(
      all_dat %>%
      filter_acs_itt(),
      "latex"), 
      "primary/anticoagulation-summary")
```

```{r}
#| label: tbl-domainC-country-po
#| code-summary: Relationship anti-coagulation to outcome by country
#| tbl-cap: Primary outcome by anti-coagulation intervention by country.
all_dat %>%
  filter(ENR_rec == 1, WTH_FU == 0) %>%
  dplyr::count(
    Country = PT_CountryName, 
    `Anti-coagulation` = CAssignment, 
    PO) %>%
  complete(Country, `Anti-coagulation`, PO, fill = list(n = 0)) %>%
  group_by(Country, `Anti-coagulation`) %>%
  spread(PO, n, fill = 0) %>%
  ungroup() %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  select(-Country) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped") %>%
  pack_rows("Australia", 1, 5) %>%
  pack_rows("India", 6, 10) %>%
  pack_rows("Nepal", 11, 15) %>%
  pack_rows("New Zealand", 16, 20)
```

```{r}
#| label: tbl-domainC-po-prec3drop
#| code-summary: Relationship anti-coagulation to outcome
#| tbl-cap: |
#|   Primary outcome by anti-coagulation intervention for participants
#|   randomised prior to 2021-09-10 (closure of C3 intervention).
all_dat %>%
  filter(ENR_rec == 1, WTH_FU == 0, RandDate < as.Date("2021-09-10")) %>%
  dplyr::count(`Anti-coagulation` = CAssignment, PO) %>%
  group_by(`Anti-coagulation`) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

```{r}
#| label: tbl-domainC-po-pv5
#| code-summary: Relationship anti-coagulation to outcome
#| tbl-cap: |
#|   Primary outcome by anti-coagulation intervention for participants
#|   randomised under protocol version 5.0.
all_dat %>%
  filter(ENR_rec == 1, WTH_FU == 0, EL_ProtocolVersion == "5.0") %>%
  dplyr::count(`Anti-coagulation` = CAssignment, PO) %>%
  group_by(`Anti-coagulation`) %>%
  spread(PO, n, fill = 0) %>%
  mutate(
    p_1 = `1` / (`1` + `0`),
    p_miss = `<NA>` / (`1` + `0` + `<NA>`)
  ) %>%
  kable(digits = 2) %>%
  kable_styling(bootstrap_options = "striped")
```

# Analyses

The following analyses are planned:

- primary model using the ACS-ITT
  - reduced model with only treatment covariates
  - reduced model with no epoch or site terms
  - reduced model with no epoch terms
- primary model using the FAS-ITT
  - reduced model with only treatment covariates
  - reduced model with no epoch or site terms
  - reduced model with no epoch terms
- subgroup analyses using both datasets and the primary model for:
  - country
  - age $\geq$ 60
  - symptom onset > 7 days

Subgroup effects will be explored in two ways, first by fitting the model to the subgroup itself, and secondly by introducing treatment by covariate interaction terms into the model.

In what follows, the model is built up from the simplest (treatment-only) to the most complex (primary model).

## ACS-ITT

In these analyses, the population is restricted to participants who were randomised to the anti-coagulation domain.

### Treatment only

```{r}
#| label: sample-trtonly-acs-itt-model
#| code-summary: Data and sampling treatment only model
seed <- 17250
mod_dat <- make_model_data_trt_only(acs_itt_nona_dat)
snk <- capture.output(
  trtonly_acs_itt_fit <- logistic_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8
))
mod_rvs <- as_draws_rvars(trtonly_acs_itt_fit$draws(c("beta")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
trt_only_freq <- glm(PO ~ CAssignment + AAssignment, data = acs_itt_nona_dat, family = binomial())
```

```{r}
#| label: fig-or-densities-trtonly-acs-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-trtonly-acs-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
odds_ratio_summary_table(mod_rvs$OR)
```

```{r}
#| label: summary-trtonly-acs-itt-model
#| code-summary: Summaries
trtonly_acs_itt_fit$summary("beta")
```

::: column-margin
**Diagnostics**

```{r}
#| label: diagnostics-trtonly-acs-itt-model
#| echo: false
do.call(cbind, trtonly_acs_itt_fit$diagnostic_summary())
```
:::

```{r}
#| label: fig-trace-trtonly-acs-itt-model
#| fig-cap: "Trace plots"
#| fig-height: 3
#| code-summary: Trace plots
mcmc_trace(trtonly_acs_itt_fit$draws("beta_raw", format = "matrix"))
rm(trtonly_acs_itt_fit)
```

#### Subgroups

##### Country

```{r}
#| eval: false
fit1 <- glm(
  PO ~ CAssignment + ctry, 
  data = acs_itt_dat %>% filter(CAssignment %in% c("C1", "C2")), 
  family = binomial(),
  contrast = list(CAssignment = contr.orthonorm))
fit2 <- glm(
  PO ~ CAssignment * ctry, 
  data = acs_itt_dat %>% filter(CAssignment %in% c("C1", "C2")), 
  family = binomial(),
  contrast = list(CAssignment = contr.orthonorm))
fit3 <- glm(
  PO ~ CAssignment + ctry + agegte60 + dsfsgt7, 
  data = acs_itt_dat %>% filter(CAssignment %in% c("C1", "C2")), 
  family = binomial())
fit4 <- glm(
  PO ~ CAssignment * (ctry + agegte60 + dsfsgt7), 
  data = acs_itt_dat %>% filter(CAssignment %in% c("C1", "C2")), 
  family = binomial()) 

XW <- model.matrix( ~ CAssignment * (ctry + agegte60 + dsfsgt), 
                   data = acs_itt_dat %>% filter(CAssignment %in% c("C1", "C2")),
                   )
logistic_subgrp_mod$sample()

# Fit each region subgroup independently
ctry_vals <- as.character(unique(acs_itt_nona_dat$ctry))
ctry_or <- vector("list", 4)
names(ctry_or) <- ctry_vals
for(i in 1:4) {
  mod_dat <- make_model_data_trt_only(
    acs_itt_nona_dat %>% filter(ctry == ctry_vals[i]))
  seed <- 713509
  snk <- capture.output(
    submod <- logistic_mod$sample(
      data = mod_dat,
      seed = seed,
      refresh = 0,
      iter_sampling = 2500,
      chains = 8,
      parallel_chains = 8
  ))
  mod_rvs <- as_draws_rvars(submod$draws(c("beta")))
  mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
  ctry_or[[i]] <- mod_rvs$OR
}
ctry_or <- as_tibble(ctry_or) %>% 
  mutate(Contrast = names(ctry_or[[1]])) %>%
  pivot_longer(1:4, "Country") %>%
  mutate(Contrast = fct_inorder(Contrast))
ggplot(ctry_or, aes(xdist = value, y = Country)) +
  facet_grid(Contrast ~ .) +
  stat_pointinterval() +
  geom_vline(xintercept = 1, linetype = 2) +
  scale_x_log10()
```

##### Days Since First Symptoms

```{r}
#| eval: false
# Fit each region subgroup independently
dsfs_vals <- unique(acs_itt_nona_dat$dsfsgt7)
dsfs_or <- vector("list", length(dsfs_vals))
names(dsfs_or) <- c("DSFS > 7", "DSFS <= 7")
for(i in 1:length(dsfs_vals)) {
  mod_dat <- make_model_data_trt_only(
    acs_itt_nona_dat %>% filter(dsfsgt7 == dsfs_vals[i]))
  seed <- 713509
  snk <- capture.output(
    submod <- logistic_mod$sample(
      data = mod_dat,
      seed = seed,
      refresh = 0,
      iter_sampling = 2500,
      chains = 8,
      parallel_chains = 8
  ))
  mod_rvs <- as_draws_rvars(submod$draws(c("beta")))
  mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
  dsfs_or[[i]] <- mod_rvs$OR
}
dsfs_or <- as_tibble(dsfs_or) %>% 
  mutate(Contrast = names(dsfs_or[[1]])) %>%
  pivot_longer(1:2, "grp") %>%
  mutate(Contrast = fct_inorder(Contrast))
ggplot(dsfs_or, aes(xdist = value, y = grp)) +
  facet_grid(Contrast ~ .) +
  stat_pointinterval() +
  geom_vline(xintercept = 1, linetype = 2) +
  scale_x_log10() +
  labs(y = "Days since symptom onset")
```


##### Age group

```{r}
#| eval: false
# Fit each region subgroup independently
age_vals <- unique(acs_itt_nona_dat$agegte60)
age_or <- vector("list", length(dsfs_vals))
names(age_or) <- c("Age 60+", "Age < 60")
for(i in 1:length(age_vals)) {
  mod_dat <- make_model_data_trt_only(
    acs_itt_nona_dat %>% filter(agegte60 == age_vals[i]))
  seed <- 713509
  snk <- capture.output(
    submod <- logistic_mod$sample(
      data = mod_dat,
      seed = seed,
      refresh = 0,
      iter_sampling = 2500,
      chains = 8,
      parallel_chains = 8
  ))
  mod_rvs <- as_draws_rvars(submod$draws(c("beta")))
  mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
  age_or[[i]] <- mod_rvs$OR
}
age_or <- as_tibble(age_or) %>% 
  mutate(Contrast = names(age_or[[1]])) %>%
  pivot_longer(1:2, "grp") %>%
  mutate(Contrast = fct_inorder(Contrast))
ggplot(age_or, aes(xdist = value, y = grp)) +
  facet_grid(Contrast ~ .) +
  stat_pointinterval() +
  geom_vline(xintercept = 1, linetype = 2) +
  scale_x_log10() +
  labs(y = "Age group")
```

### Treatment plus covariates (no site or epoch)

Under this model a component is added for country (region), $\mathbb{I}[\text{age}\geq 60]$ (sample-mean centred), and intervention specific ineligibility (C3 only)

::: column-margin
New terms:

$$
\begin{aligned}
\rho_1 &= 0 \\
\rho_r &\overset{\text{iid}}{\sim} \text{Normal}(0, 1), r=2,...,R,\\
\beta_{\text{age}\geq 60} &\sim \text{Normal}(0, 2.5^2) \\
\beta_{\text{inelgC3}} &\sim \text{Normal}(0, 10)
\end{aligned}
$$
:::

```{r}
#| label: model-no-site-epoch-sampling
#| code-summary: Data and sampling no site or epoch model
seed <- 71236
mod_dat <- make_model_data_noepochsite(acs_itt_nona_dat)
snk <- capture.output(
  noepochsite_acs_itt_fit <- logistic_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8
))
mod_rvs <- as_draws_rvars(noepochsite_acs_itt_fit$draws(c("beta")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
```

```{r}
#| label: fig-or-densities-noepochsite-acs-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-noepochsite-acs-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
odds_ratio_summary_table(mod_rvs$OR)
```


```{r}
#| label: summary-noepochsite-acs-itt-model
#| code-summary: Summaries
noepochsite_acs_itt_fit$summary("beta")
```

::: column-margin
**Diagnostics**

```{r}
#| label: diagnostics-noepochsite-acs-itt-model
#| echo: false
do.call(cbind, noepochsite_acs_itt_fit$diagnostic_summary())
```
:::

```{r}
#| label: fig-trace-noepochsite-acs-itt-model
#| fig-cap: "Trace plots"
#| fig-height: 4
#| code-summary: Trace plots
mcmc_trace(noepochsite_acs_itt_fit$draws("beta_raw", format = "matrix"))
rm(noepochsite_acs_itt_fit)
```


### Treatment plus covariates plus site (no epoch)

Under this model a component is added for site nested within country.

::: column-margin
New terms

$$
\begin{aligned}
\xi_{rs} &\overset{\text{iid}}{\sim}\text{Normal}(0,\sigma^2_{r}), s=1,...,S_r, r=1,...,R \\
\sigma_r &\overset{\text{iid}}{\sim} \text{Half-}t(3, 1).
\end{aligned}
$$
:::

```{r}
#| label: model-noepoch-acs-itt-fit
#| code-summary: Data and sampling no site or epoch model
seed <- 71236
mod_dat <- make_model_data_noepoch(acs_itt_nona_dat)
snk <- capture.output(
  noepoch_acs_itt_fit <- noepoch_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8,
    adapt_delta = 0.9
))
mod_rvs <- as_draws_rvars(noepoch_acs_itt_fit$draws(c("beta")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
```

```{r}
#| label: fig-or-densities-noepoch-acs-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-noepoch-acs-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
odds_ratio_summary_table(mod_rvs$OR)
```

```{r}
#| label: summary-noepoch-acs-itt-fit
#| code-summary: Summaries
noepoch_acs_itt_fit$summary("beta")
```

::: column-margin
**Diagnostics**

```{r}
#| label: diagnostics-noepoch-acs-itt-fit
#| echo: false
do.call(cbind, noepoch_acs_itt_fit$diagnostic_summary())
```
:::

```{r}
#| label: fig-trace-beta-noepoch-acs-itt-fit
#| fig-cap: "Trace plots"
#| fig-height: 4
#| code-summary: Trace plots
mcmc_trace(noepoch_acs_itt_fit$draws(
  c("beta_raw", "beta_region_raw"), 
  format = "matrix"))
```

```{r}
#| label: fig-trace-site-noepoch-acs-itt-fit
#| fig-cap: "Trace plots"
#| fig-cap-location: bottom
#| caption-location: bottom
#| fig-height: 8
#| fig-width: 10
#| code-summary: Trace plots site terms
#| column: page
mcmc_trace(noepoch_acs_itt_fit$draws(
  c("epsilon_site", "tau_site"), 
  format = "matrix"))
```


### Primary Model

Under this model a component is added for epoch (calendar time).

::: column-margin
New terms

$$
\begin{aligned}
\tau_1 &= 0 \\
\tau_t &= \tau_{t-1} + \sigma_\tau\epsilon_t \\
\epsilon_t &\overset{\text{iid}}{\sim} \text{Normal}(0,1) \\
\sigma_\tau &\sim \text{Half-}t(3, 1)
\end{aligned}
$$
:::

```{r}
#| label: model-primary-sampling
#| code-summary: Data and sampling primary model
seed <- 32915
mod_dat <- make_model_data_primary(acs_itt_nona_dat)
snk <- capture.output(
  primary_fit <- primary_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 5000,
    chains = 8,
    parallel_chains = 8,
    adapt_delta = 0.98
))
```

::: column-margin
**Diagnostics**

```{r}
#| echo: false
do.call(cbind, primary_fit$diagnostic_summary())
```
:::

```{r}
#| label: primary-summary
#| code-summary: Summaries
primary_fit$summary(c("beta", "beta_region"))
```

```{r}
#| label: fig-primary-trace-site
#| fig-cap: "Trace plots"
#| fig-cap-location: bottom
#| caption-location: bottom
#| fig-height: 8
#| fig-width: 10
#| code-summary: Trace plots site terms
#| column: page
mcmc_trace(primary_fit$draws(
  c("epsilon_site", "tau_site"), 
  format = "matrix"))
```

```{r}
#| label: fig-primary-trace-epoch
#| fig-cap: "Trace plots"
#| fig-cap-location: bottom
#| caption-location: bottom
#| fig-height: 6
#| fig-width: 10
#| code-summary: Trace plots epoch terms
#| column: page
mcmc_trace(primary_fit$draws(
  c("epsilon_epoch", "tau_epoch"), 
  format = "matrix"))
```

```{r}
#| label: primary-posteriors
#| code-summary: Posterior draws
Ca <- cbind(1, attr(mod_dat$X, "contrasts")$AAssignment)
Cc <- cbind(1, attr(mod_dat$X, "contrasts")$CAssignment)
modrv <- as_draws_rvars(
  primary_fit$draws(
    c("beta", "beta_region", "gamma_site", "tau_site", "gamma_epoch", "tau_epoch")))
modrv$eta <- as.vector(Cc %**% modrv$beta[1:4])
modrv$beta_uncon <- as.vector(Cc[, -1] %**% modrv$beta[2:4])
modrv$prob <- 1 / (1 + exp(-modrv$eta))
modrv$beta_trt <- as.vector(
  transform_coding(Cc, cbind(1, contr.treatment(4))) %**% 
  modrv$beta[1:4])
modrv$OR <- setNames(exp(modrv$beta_trt[-1]), c("C2", "C3", "C4"))
```

```{r}
#| label: fig-posterior-density-primary
#| code-summary: Posterior density
#| fig-cap: Posterior densities for treatment odds ratios.
#| fig-height: 4
tibble(
  Contrast = fct_inorder(
    c("C2 v C1", "C3 v C1", "C4 v C1", "C2 vs C4")), 
  RV = c(modrv$OR, modrv$OR[1] / modrv$OR[3])) %>% 
  ggplot(., aes(y = Contrast, xdist = RV)) + 
  stat_halfeye(
    aes(fill = 
          stat(cut_cdf_qi(
            cdf, 
            .width = c(.5, .8, .95, 0.99), 
            labels = scales::percent_format()))),
    adjust = 1, n = 1001, .width = c(0.5, 0.8, 0.95)
    ) + 
  scale_fill_brewer(
    palette = "Reds",
    direction = -1, 
    na.translate = FALSE) + 
  labs(
    x = "Odds ratio contrast",
    fill = "Interval"
  ) +
  scale_x_log10(breaks = c(0.1, 0.25, 0.5, 1, 2, 4, 10)) + 
  geom_vline(xintercept = 1)
```

```{r}
#| label: tbl-posterior-summaries-primary
#| code-summary: Posterior summaries
#| tbl-cap: Posterior summaries
tibble(
    Parameter = c("OR[C2]", "OR[C3]", "OR[C4]"),
    `Pr(OR < 1)` = Pr(modrv$OR < 1),
    Median = median(modrv$OR),
    Mean = E(modrv$OR),
    `95% CrI` = apply(
      quantile(modrv$OR, c(0.025, 0.975)), 2, 
      function(x) sprintf("(%.2f, %.2f)", x[1], x[2]))
  ) %>%
  kable(digits = 2, align = "lrrrr") %>%
  kable_styling(bootstrap_options = "striped")
```

#### Posterior Predictive Checks

```{r}
#| eval: false
y_ppc <- as_draws_rvars(primary_fit$draws("y_ppc"))$y_ppc
ppc_dat <- bind_cols(acs_itt_dat, tibble(y_ppc = y_ppc)) %>%
  select(
    StudyPatientID,
    AAssignment,
    CAssignment, 
    AgeAtEntry,
    inelgc3,
    ctry, 
    site, 
    epoch,
    PO,
    y_ppc) %>%
  mutate(
    mean_y_ppc = mean(y_ppc))

plot_grp_ppc <- function(dat, lab = "") {
  dat %>%
    ggplot(aes(y = grp, xdist = rvar_mean_y_ppc)) +
    stat_ccdfinterval(
      normalize = "groups", 
      slab_colour = "grey50",
      slab_size = 1,
      slab_fill = NA) +
    geom_segment(aes(x = mean_y, 
                     xend = mean_y,
                     y = 1:nrow(dat)-0.5,
                     yend = 2:(nrow(dat)+1)-0.5)) +
    labs(
      x = "Average predicted y", 
      y = lab)  
}

ppc_C <- ppc_dat %>%
  group_by(grp = CAssignment) %>%
  summarise(
    mean_y = mean(PO),
    rvar_mean_y_ppc = rvar_mean(y_ppc)
  )
ppc_ctry <- ppc_dat %>%
  group_by(grp = ctry) %>%
  summarise(
    mean_y = mean(PO),
    rvar_mean_y_ppc = rvar_mean(y_ppc)
  )
ppc_epoch <- ppc_dat %>%
  group_by(grp = epoch) %>%
  summarise(
    mean_y = mean(PO),
    rvar_mean_y_ppc = rvar_mean(y_ppc)
  )
ppc_site <- ppc_dat %>%
  group_by(Country = ctry, grp = site) %>%
  summarise(
    mean_y = mean(PO),
    rvar_mean_y_ppc = rvar_mean(y_ppc)
  )

p1 <- plot_grp_ppc(ppc_C, "Anti-coagulation intervention")
p2 <- plot_grp_ppc(ppc_ctry, "Country")
p3 <- plot_grp_ppc(ppc_epoch, "Epoch")
p4 <- plot_grp_ppc(ppc_site %>% filter(Country == "IN"))
p5 <- plot_grp_ppc(ppc_site %>% filter(Country == "AU"))
p6 <- plot_grp_ppc(ppc_site %>% filter(Country == "NP"))
p7 <- plot_grp_ppc(ppc_site %>% filter(Country == "NZ"))

p1 | p2
```

## FAS-ITT

In these analyses, the population is includes all participants who were randomised to the platform, even if not randomised into the anticoagulation domain.

### Treatment only

```{r}
#| label: trtonly-fas-itt-data
mod_dat <- make_model_data_trt_only(fas_itt_nona_dat)
```

```{r}
#| label: sample-trtonly-fas-itt-model
#| eval: false
seed <- 135736
snk <- capture.output(
  trtonly_fit <- logistic_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8
))
save_cmdstanr_model(trtonly_fit, "primary/trtonly-fas-itt")
```

```{r}
#| label: load-trtonly-fas-itt-model
trtonly_fas_itt_fit <- 
  readRDS(file.path("outputs", "models", "primary", "trtonly-fas-itt.rds"))
mod_rvs <- as_draws_rvars(trtonly_fas_itt_fit$draws(c("beta")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
```

```{r}
#| label: fig-or-densities-trtonly-fas-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-trtonly-fas-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
odds_ratio_summary_table(mod_rvs$OR)
```

#### Subgroups




### Treatment plus covariates (no site or epoch)

```{r}
#| label: noepochsite-fas-itt-data
mod_dat <- make_model_data_noepochsite(fas_itt_nona_dat)
```

```{r}
#| label: sample-noepochsite-fas-itt-model
#| eval: false
seed <- 91376
snk <- capture.output(
  noepochsite_fit <- logistic_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8,
    adapt_delta = 0.95
))
save_cmdstanr_model(noepochsite_fit, "primary/noepochsite-fas-itt")
```

```{r}
#| label: load-noepochsite-fas-itt-model
noepochsite_fas_itt_fit <- 
  readRDS(file.path("outputs", "models", "primary", "noepochsite-fas-itt.rds"))
mod_rvs <- as_draws_rvars(noepochsite_fas_itt_fit$draws(c("beta")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
```

```{r}
#| label: fig-or-densities-noepochsite-fas-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
#| echo: false
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-noepochsite-fas-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
#| echo: false
odds_ratio_summary_table(mod_rvs$OR)
```

### No epoch

```{r}
#| label: noepoch-fas-itt-data
mod_dat <- make_model_data_noepoch(fas_itt_nona_dat)
```

```{r}
#| label: sample-noepoch-fas-itt-model
#| eval: false
seed <- 76150
snk <- capture.output(
  noepoch_fit <- noepoch_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8,
    adapt_delta = 0.95
))
save_cmdstanr_model(noepoch_fit, "primary/noepoch-fas-itt")
```

```{r}
#| label: load-noepoch-fas-itt-model
noepoch_fas_itt_fit <- 
  readRDS(file.path("outputs", "models", "primary", "noepoch-fas-itt.rds"))
mod_rvs <- as_draws_rvars(noepoch_fas_itt_fit$draws(c("beta")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
```

```{r}
#| label: fig-or-densities-noepoch-fas-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
#| echo: false
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-noepoch-fas-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
#| echo: false
odds_ratio_summary_table(mod_rvs$OR)
```

### Primary Model

```{r}
#| label: primary-fas-itt-data
mod_dat <- make_model_data_primary(fas_itt_nona_dat)
```

```{r}
#| label: sample-primary-fas-itt-model
#| eval: false
seed <- 35136
snk <- capture.output(
  primary_fit <- primary_mod$sample(
    data = mod_dat,
    seed = seed,
    refresh = 0,
    iter_sampling = 2500,
    chains = 8,
    parallel_chains = 8,
    adapt_delta = 0.99
))
save_cmdstanr_model(primary_fit, "primary/primary-fas-itt")
```

```{r}
#| label: load-primary-fas-itt-model
primary_fas_itt_fit <- readRDS(
  file.path("outputs", "models", "primary", "primary-fas-itt.rds"))
mod_rvs <- as_draws_rvars(
  primary_fas_itt_fit$draws(c(
    "beta", "beta_region", "gamma_site", "tau_site", "gamma_epoch", "tau_epoch")))
mod_rvs <- add_treatment_rvs(mod_rvs, mod_dat)
```

```{r}
#| label: fig-or-densities-primary-fas-itt-model
#| fig-cap: Posterior densities for odds ratio contrasts.
#| echo: false
plot_or_densities(mod_rvs$OR)
```

```{r}
#| label: tbl-or-densities-primary-fas-itt-model
#| tbl-cap: Posterior summaries for odds ratio contrasts.
#| echo: false
odds_ratio_summary_table(mod_rvs$OR)
```
